{"map":"{\"version\":3,\"sources\":[],\"names\":[],\"mappings\":\"\"}","code":"webpackHotUpdate(0,{10:function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval('\\n// EXTERNAL MODULE: ./node_modules/jsmpeg/jsmpg.js\\nvar jsmpg = __webpack_require__(11);\\nvar jsmpg_default = /*#__PURE__*/__webpack_require__.n(jsmpg);\\n\\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/selector.js?type=script&index=0!./src/vue/views/index.vue\\n//\\n//\\n//\\n//\\n//\\n//\\n\\n\\n/* harmony default export */ var views = ({\\n    name:\\'index\\',\\n    data(){\\n        return {\\n            msg:\"我可以等在你身旁\"\\n        }\\n    },\\n    methods:{\\n        teb:function () {\\n            this.msg = \"像影子追着光梦游。\";\\n        },\\n        startEvent:function () {\\n            var canvas = document.getElementById(\\'video-canvas\\');\\n            console.log(jsmpg_default.a);\\n            var player = new jsmpg_default.a().Player(\\'ws://wsopen.ys7.com/150373158_1_1\\', {canvas: canvas});\\n        }\\n    },\\n    mounted:function () {\\n        this.startEvent();\\n    }\\n});\\n\\n\\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-b6758d10\",\"hasScoped\":false,\"optionsId\":\"0\",\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/vue/views/index.vue\\nvar render = function() {\\n  var _vm = this\\n  var _h = _vm.$createElement\\n  var _c = _vm._self._c || _h\\n  return _vm._m(0)\\n}\\nvar staticRenderFns = [\\n  function() {\\n    var _vm = this\\n    var _h = _vm.$createElement\\n    var _c = _vm._self._c || _h\\n    return _c(\"div\", { attrs: { id: \"index\" } }, [\\n      _c(\"canvas\", { attrs: { id: \"video-canvas\" } })\\n    ])\\n  }\\n]\\nrender._withStripped = true\\n\\nif (true) {\\n  module.hot.accept()\\n  if (module.hot.data) {\\n    __webpack_require__(3)      .rerender(\"data-v-b6758d10\", { render: render, staticRenderFns: staticRenderFns })\\n  }\\n}\\n// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/component-normalizer.js\\nvar component_normalizer = __webpack_require__(4);\\n\\n// CONCATENATED MODULE: ./src/vue/views/index.vue\\nvar views_disposed = false\\nfunction views_injectStyle (context) {\\n  if (views_disposed) return\\n  __webpack_require__(15)\\n}\\n/* script */\\n\\n\\n/* template */\\n\\n/* template functional */\\nvar views_vue_template_functional_ = false\\n/* styles */\\nvar views_vue_styles_ = views_injectStyle\\n/* scopeId */\\nvar views_vue_scopeId_ = null\\n/* moduleIdentifier (server only) */\\nvar views_vue_module_identifier_ = null\\n\\nvar views_Component = Object(component_normalizer[\"a\" /* default */])(\\n  views,\\n  render,\\n  staticRenderFns,\\n  views_vue_template_functional_,\\n  views_vue_styles_,\\n  views_vue_scopeId_,\\n  views_vue_module_identifier_\\n)\\nviews_Component.options.__file = \"src\\\\\\\\vue\\\\\\\\views\\\\\\\\index.vue\"\\n\\n/* hot reload */\\nif (true) {(function () {\\n  var hotAPI = __webpack_require__(3)\\n  hotAPI.install(__webpack_require__(1), false)\\n  if (!hotAPI.compatible) return\\n  module.hot.accept()\\n  if (!module.hot.data) {\\n    hotAPI.createRecord(\"data-v-b6758d10\", views_Component.options)\\n  } else {\\n    hotAPI.reload(\"data-v-b6758d10\", views_Component.options)\\n  }\\n  module.hot.dispose(function (data) {\\n    views_disposed = true\\n  })\\n})()}\\n\\n/* harmony default export */ var vue_views = __webpack_exports__[\"a\"] = (views_Component.exports);\\n\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL3Z1ZS92aWV3cy9pbmRleC52dWU/OGY3NyIsIndlYnBhY2s6Ly8vLi9zcmMvdnVlL3ZpZXdzL2luZGV4LnZ1ZT82MjQ4Iiwid2VicGFjazovLy8uL3NyYy92dWUvdmlld3MvaW5kZXgudnVlP2Q3YmUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDNUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsU0FBUyxjQUFjLEVBQUU7QUFDL0Msb0JBQW9CLFNBQVMscUJBQXFCLEVBQUU7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDUTtBQUNSO0FBQ0E7QUFDQTtBQUNBLDhEQUFxRSxtREFBbUQ7QUFDeEg7QUFDQSxDOzs7OztBQ3ZCQTtBQUNBO0FBQ0E7QUFDQSx3QkFBbUw7QUFDbkw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUN1UDtBQUN2UDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFdBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDOztBQUVEIiwiZmlsZSI6IjEwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiPHRlbXBsYXRlPlxyXG4gICAgPGRpdiBpZD1cImluZGV4XCI+XHJcbiAgICAgICAgPGNhbnZhcyBpZD1cInZpZGVvLWNhbnZhc1wiPjwvY2FudmFzPlxyXG4gICAgPC9kaXY+XHJcbjwvdGVtcGxhdGU+XHJcblxyXG48c2NyaXB0PlxyXG4gICAgaW1wb3J0IGpzbXBlZyBmcm9tICcuLi8uLi8uLi9ub2RlX21vZHVsZXMvanNtcGVnJ1xyXG4gICAgZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgICAgIG5hbWU6J2luZGV4JyxcclxuICAgICAgICBkYXRhKCl7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBtc2c6XCLmiJHlj6/ku6XnrYnlnKjkvaDouqvml4FcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBtZXRob2RzOntcclxuICAgICAgICAgICAgdGViOmZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubXNnID0gXCLlg4/lvbHlrZDov73nnYDlhYnmoqbmuLjjgIJcIjtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc3RhcnRFdmVudDpmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ZpZGVvLWNhbnZhcycpO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coanNtcGVnKTtcclxuICAgICAgICAgICAgICAgIHZhciBwbGF5ZXIgPSBuZXcganNtcGVnKCkuUGxheWVyKCd3czovL3dzb3Blbi55czcuY29tLzE1MDM3MzE1OF8xXzEnLCB7Y2FudmFzOiBjYW52YXN9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbW91bnRlZDpmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhcnRFdmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbjwvc2NyaXB0PlxyXG5cclxuPHN0eWxlIGxhbmc9XCJzdHlsdXNcIiByZWw9XCJzdHlsZXNoZWV0XCI+XHJcbiAgICNpbmRleFxyXG4gICAgICAgZm9udC1zaXplIDogMTZweDtcclxuICAgICAgIHRleHQtYWxpZ24gOiBjZW50ZXI7XHJcbiAgICAgICBjb2xvciA6IHJlZDtcclxuPC9zdHlsZT4iLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBfdm0gPSB0aGlzXG4gIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgcmV0dXJuIF92bS5fbSgwKVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtcbiAgZnVuY3Rpb24oKSB7XG4gICAgdmFyIF92bSA9IHRoaXNcbiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgICByZXR1cm4gX2MoXCJkaXZcIiwgeyBhdHRyczogeyBpZDogXCJpbmRleFwiIH0gfSwgW1xuICAgICAgX2MoXCJjYW52YXNcIiwgeyBhdHRyczogeyBpZDogXCJ2aWRlby1jYW52YXNcIiB9IH0pXG4gICAgXSlcbiAgfVxuXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9XG5pZiAobW9kdWxlLmhvdCkge1xuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmIChtb2R1bGUuaG90LmRhdGEpIHtcbiAgICByZXF1aXJlKFwidnVlLWhvdC1yZWxvYWQtYXBpXCIpICAgICAgLnJlcmVuZGVyKFwiZGF0YS12LWI2NzU4ZDEwXCIsIHsgcmVuZGVyOiByZW5kZXIsIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zIH0pXG4gIH1cbn0iLCJ2YXIgZGlzcG9zZWQgPSBmYWxzZVxuZnVuY3Rpb24gaW5qZWN0U3R5bGUgKGNvbnRleHQpIHtcbiAgaWYgKGRpc3Bvc2VkKSByZXR1cm5cbiAgcmVxdWlyZShcIiEhdnVlLXN0eWxlLWxvYWRlciFjc3MtbG9hZGVyP3NvdXJjZU1hcCEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXg/e1xcXCJvcHRpb25zSWRcXFwiOlxcXCIwXFxcIixcXFwidnVlXFxcIjp0cnVlLFxcXCJzY29wZWRcXFwiOmZhbHNlLFxcXCJzb3VyY2VNYXBcXFwiOnRydWV9IXN0eWx1cy1sb2FkZXIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9pbmRleC52dWVcIilcbn1cbi8qIHNjcmlwdCAqL1xuZXhwb3J0ICogZnJvbSBcIiEhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vaW5kZXgudnVlXCJcbmltcG9ydCBfX3Z1ZV9zY3JpcHRfXyBmcm9tIFwiISEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9pbmRleC52dWVcIlxuLyogdGVtcGxhdGUgKi9cbmltcG9ydCB7cmVuZGVyIGFzIF9fdnVlX3JlbmRlcl9fLCBzdGF0aWNSZW5kZXJGbnMgYXMgX192dWVfc3RhdGljX3JlbmRlcl9mbnNfX30gZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyL2luZGV4P3tcXFwiaWRcXFwiOlxcXCJkYXRhLXYtYjY3NThkMTBcXFwiLFxcXCJoYXNTY29wZWRcXFwiOmZhbHNlLFxcXCJvcHRpb25zSWRcXFwiOlxcXCIwXFxcIixcXFwiYnVibGVcXFwiOntcXFwidHJhbnNmb3Jtc1xcXCI6e319fSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vaW5kZXgudnVlXCJcbi8qIHRlbXBsYXRlIGZ1bmN0aW9uYWwgKi9cbnZhciBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18gPSBmYWxzZVxuLyogc3R5bGVzICovXG52YXIgX192dWVfc3R5bGVzX18gPSBpbmplY3RTdHlsZVxuLyogc2NvcGVJZCAqL1xudmFyIF9fdnVlX3Njb3BlSWRfXyA9IG51bGxcbi8qIG1vZHVsZUlkZW50aWZpZXIgKHNlcnZlciBvbmx5KSAqL1xudmFyIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18gPSBudWxsXG5pbXBvcnQgbm9ybWFsaXplQ29tcG9uZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50LW5vcm1hbGl6ZXJcIlxudmFyIENvbXBvbmVudCA9IG5vcm1hbGl6ZUNvbXBvbmVudChcbiAgX192dWVfc2NyaXB0X18sXG4gIF9fdnVlX3JlbmRlcl9fLFxuICBfX3Z1ZV9zdGF0aWNfcmVuZGVyX2Zuc19fLFxuICBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18sXG4gIF9fdnVlX3N0eWxlc19fLFxuICBfX3Z1ZV9zY29wZUlkX18sXG4gIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX19cbilcbkNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwic3JjXFxcXHZ1ZVxcXFx2aWV3c1xcXFxpbmRleC52dWVcIlxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkgeyhmdW5jdGlvbiAoKSB7XG4gIHZhciBob3RBUEkgPSByZXF1aXJlKFwidnVlLWhvdC1yZWxvYWQtYXBpXCIpXG4gIGhvdEFQSS5pbnN0YWxsKHJlcXVpcmUoXCJ2dWVcIiksIGZhbHNlKVxuICBpZiAoIWhvdEFQSS5jb21wYXRpYmxlKSByZXR1cm5cbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAoIW1vZHVsZS5ob3QuZGF0YSkge1xuICAgIGhvdEFQSS5jcmVhdGVSZWNvcmQoXCJkYXRhLXYtYjY3NThkMTBcIiwgQ29tcG9uZW50Lm9wdGlvbnMpXG4gIH0gZWxzZSB7XG4gICAgaG90QVBJLnJlbG9hZChcImRhdGEtdi1iNjc1OGQxMFwiLCBDb21wb25lbnQub3B0aW9ucylcbiAgfVxuICBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBkaXNwb3NlZCA9IHRydWVcbiAgfSlcbn0pKCl9XG5cbmV4cG9ydCBkZWZhdWx0IENvbXBvbmVudC5leHBvcnRzXG4iXSwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///10\\n')},11:function(module,exports){eval(\"\\n\\n// jsmpeg by Dominic Szablewski - phoboslab.org, github.com/phoboslab\\n//\\n// Consider this to be under MIT license. It's largely based an an Open Source\\n// Decoder for Java under GPL, while I looked at another Decoder from Nokia\\n// (under no particular license?) for certain aspects.\\n// I'm not sure if this work is \\\"derivative\\\" enough to have a different license\\n// but then again, who still cares about MPEG1?\\n//\\n// Based on \\\"Java MPEG-1 Video Decoder and Player\\\" by Korandi Zoltan:\\n// http://sourceforge.net/projects/javampeg1video/\\n//\\n// Inspired by \\\"MPEG Decoder in Java ME\\\" by Nokia:\\n// http://www.developer.nokia.com/Community/Wiki/MPEG_decoder_in_Java_ME\\n\\n\\nvar requestAnimFrame = (function(){\\n  return window.requestAnimationFrame ||\\n    window.webkitRequestAnimationFrame ||\\n    window.mozRequestAnimationFrame ||\\n    function( callback ){\\n      window.setTimeout(callback, 1000 / 60);\\n    };\\n})();\\n\\nvar jsmpeg = window.jsmpeg = function( url, opts ) {\\n  opts = opts || {};\\n  this.benchmark = !!opts.benchmark;\\n  this.canvas = opts.canvas || document.createElement('canvas');\\n  this.autoplay = !!opts.autoplay;\\n  this.loop = !!opts.loop;\\n  this.seekable = !!opts.seekable;\\n  this.externalLoadCallback = opts.onload || null;\\n  this.externalDecodeCallback = opts.ondecodeframe || null;\\n  this.externalFinishedCallback = opts.onfinished || null;\\n\\n  this.customIntraQuantMatrix = new Uint8Array(64);\\n  this.customNonIntraQuantMatrix = new Uint8Array(64);\\n  this.blockData = new Int32Array(64);\\n  this.zeroBlockData = new Int32Array(64);\\n  this.fillArray(this.zeroBlockData, 0);\\n\\n  // use WebGL for YCbCrToRGBA conversion if possible (much faster)\\n  if( !opts.forceCanvas2D && this.initWebGL() ) {\\n    this.renderFrame = this.renderFrameGL;\\n  } else {\\n    this.canvasContext = this.canvas.getContext('2d');\\n    this.renderFrame = this.renderFrame2D;\\n  }\\n\\n  if( url instanceof WebSocket ) {\\n    this.client = url;\\n    this.client.onopen = this.initSocketClient.bind(this);\\n  }\\n  else {\\n    this.load(url);\\n  }\\n};\\n\\n\\n\\n// ----------------------------------------------------------------------------\\n// Streaming over WebSockets\\n\\njsmpeg.prototype.waitForIntraFrame = true;\\njsmpeg.prototype.socketBufferSize = 512 * 1024; // 512kb each\\n\\njsmpeg.prototype.initSocketClient = function( client ) {\\n  this.buffer = new BitReader(new ArrayBuffer(this.socketBufferSize));\\n\\n  this.nextPictureBuffer = new BitReader(new ArrayBuffer(this.socketBufferSize));\\n  this.nextPictureBuffer.writePos = 0;\\n  this.nextPictureBuffer.chunkBegin = 0;\\n  this.nextPictureBuffer.lastWriteBeforeWrap = 0;\\n\\n  this.client.binaryType = 'arraybuffer';\\n  this.client.onmessage = this.receiveSocketMessage.bind(this);\\n};\\n\\njsmpeg.prototype.decodeSocketHeader = function( data ) {\\n  // Custom header sent to all newly connected clients when streaming\\n  // over websockets:\\n  // struct { char magic[4] = \\\"jsmp\\\"; unsigned short width, height; };\\n  if(\\n    data[0] == SOCKET_MAGIC_BYTES.charCodeAt(0) &&\\n    data[1] == SOCKET_MAGIC_BYTES.charCodeAt(1) &&\\n    data[2] == SOCKET_MAGIC_BYTES.charCodeAt(2) &&\\n    data[3] == SOCKET_MAGIC_BYTES.charCodeAt(3)\\n  ) {\\n    this.width = (data[4] * 256 + data[5]);\\n    this.height = (data[6] * 256 + data[7]);\\n    this.initBuffers();\\n  }\\n};\\n\\njsmpeg.prototype.receiveSocketMessage = function( event ) {\\n  var messageData = new Uint8Array(event.data);\\n\\n  if( !this.sequenceStarted ) {\\n    this.decodeSocketHeader(messageData);\\n  }\\n\\n  var current = this.buffer;\\n  var next = this.nextPictureBuffer;\\n\\n  if( next.writePos + messageData.length > next.length ) {\\n    next.lastWriteBeforeWrap = next.writePos;\\n    next.writePos = 0;\\n    next.index = 0;\\n  }\\n\\n  next.bytes.set( messageData, next.writePos );\\n  next.writePos += messageData.length;\\n\\n  var startCode = 0;\\n  while( true ) {\\n    startCode = next.findNextMPEGStartCode();\\n    if(\\n      startCode == BitReader.NOT_FOUND ||\\n      ((next.index >> 3) > next.writePos)\\n    ) {\\n      // We reached the end with no picture found yet; move back a few bytes\\n      // in case we are at the beginning of a start code and exit.\\n      next.index = Math.max((next.writePos-3), 0) << 3;\\n      return;\\n    }\\n    else if( startCode == START_PICTURE ) {\\n      break;\\n    }\\n  }\\n\\n  // If we are still here, we found the next picture start code!\\n\\n\\n  // Skip picture decoding until we find the first intra frame?\\n  if( this.waitForIntraFrame ) {\\n    next.advance(10); // skip temporalReference\\n    if( next.getBits(3) == PICTURE_TYPE_I ) {\\n      this.waitForIntraFrame = false;\\n      next.chunkBegin = (next.index-13) >> 3;\\n    }\\n    return;\\n  }\\n\\n  // Last picture hasn't been decoded yet? Decode now but skip output\\n  // before scheduling the next one\\n  if( !this.currentPictureDecoded ) {\\n    this.decodePicture(DECODE_SKIP_OUTPUT);\\n  }\\n\\n\\n  // Copy the picture chunk over to 'this.buffer' and schedule decoding.\\n  var chunkEnd = ((next.index) >> 3);\\n\\n  if( chunkEnd > next.chunkBegin ) {\\n    // Just copy the current picture chunk\\n    current.bytes.set( next.bytes.subarray(next.chunkBegin, chunkEnd) );\\n    current.writePos = chunkEnd - next.chunkBegin;\\n  }\\n  else {\\n    // We wrapped the nextPictureBuffer around, so we have to copy the last part\\n    // till the end, as well as from 0 to the current writePos\\n    current.bytes.set( next.bytes.subarray(next.chunkBegin, next.lastWriteBeforeWrap) );\\n    var written = next.lastWriteBeforeWrap - next.chunkBegin;\\n    current.bytes.set( next.bytes.subarray(0, chunkEnd), written );\\n    current.writePos = chunkEnd + written;\\n  }\\n\\n  current.index = 0;\\n  next.chunkBegin = chunkEnd;\\n\\n  // Decode!\\n  this.currentPictureDecoded = false;\\n  requestAnimFrame( this.scheduleDecoding.bind(this), this.canvas );\\n};\\n\\njsmpeg.prototype.scheduleDecoding = function() {\\n  this.decodePicture();\\n  this.currentPictureDecoded = true;\\n};\\n\\n\\n\\n// ----------------------------------------------------------------------------\\n// Recording from WebSockets\\n\\njsmpeg.prototype.isRecording = false;\\njsmpeg.prototype.recorderWaitForIntraFrame = false;\\njsmpeg.prototype.recordedFrames = 0;\\njsmpeg.prototype.recordedSize = 0;\\njsmpeg.prototype.didStartRecordingCallback = null;\\n\\njsmpeg.prototype.recordBuffers = [];\\n\\njsmpeg.prototype.canRecord = function(){\\n  return (this.client && this.client.readyState == this.client.OPEN);\\n};\\n\\njsmpeg.prototype.startRecording = function(callback) {\\n  if( !this.canRecord() ) {\\n    return;\\n  }\\n\\n  // Discard old buffers and set for recording\\n  this.discardRecordBuffers();\\n  this.isRecording = true;\\n  this.recorderWaitForIntraFrame = true;\\n  this.didStartRecordingCallback = callback || null;\\n\\n  this.recordedFrames = 0;\\n  this.recordedSize = 0;\\n\\n  // Fudge a simple Sequence Header for the MPEG file\\n\\n  // 3 bytes width & height, 12 bits each\\n  var wh1 = (this.width >> 4),\\n    wh2 = ((this.width & 0xf) << 4) | (this.height >> 8),\\n    wh3 = (this.height & 0xff);\\n\\n  this.recordBuffers.push(new Uint8Array([\\n    0x00, 0x00, 0x01, 0xb3, // Sequence Start Code\\n    wh1, wh2, wh3, // Width & height\\n    0x13, // aspect ratio & framerate\\n    0xff, 0xff, 0xe1, 0x58, // Meh. Bitrate and other boring stuff\\n    0x00, 0x00, 0x01, 0xb8, 0x00, 0x08, 0x00, // GOP\\n    0x00, 0x00, 0x00, 0x01, 0x00 // First Picture Start Code\\n  ]));\\n};\\n\\njsmpeg.prototype.recordFrameFromCurrentBuffer = function() {\\n  if( !this.isRecording ) { return; }\\n\\n  if( this.recorderWaitForIntraFrame ) {\\n    // Not an intra frame? Exit.\\n    if( this.pictureCodingType != PICTURE_TYPE_I ) { return; }\\n\\n    // Start recording!\\n    this.recorderWaitForIntraFrame = false;\\n    if( this.didStartRecordingCallback ) {\\n      this.didStartRecordingCallback( this );\\n    }\\n  }\\n\\n  this.recordedFrames++;\\n  this.recordedSize += this.buffer.writePos;\\n\\n  // Copy the actual subrange for the current picture into a new Buffer\\n  this.recordBuffers.push(new Uint8Array(this.buffer.bytes.subarray(0, this.buffer.writePos)));\\n};\\n\\njsmpeg.prototype.discardRecordBuffers = function() {\\n  this.recordBuffers = [];\\n  this.recordedFrames = 0;\\n};\\n\\njsmpeg.prototype.stopRecording = function() {\\n  var blob = new Blob(this.recordBuffers, {type: 'video/mpeg'});\\n  this.discardRecordBuffers();\\n  this.isRecording = false;\\n  return blob;\\n};\\n\\n\\n\\n// ----------------------------------------------------------------------------\\n// Loading via Ajax\\n\\njsmpeg.prototype.intraFrames = [];\\njsmpeg.prototype.currentFrame = -1;\\njsmpeg.prototype.currentTime = 0;\\njsmpeg.prototype.frameCount = 0;\\njsmpeg.prototype.duration = 0;\\n\\njsmpeg.prototype.load = function( url ) {\\n  this.url = url;\\n\\n  var request = new XMLHttpRequest();\\n  var that = this;\\n  request.onreadystatechange = function() {\\n    if( request.readyState == request.DONE && request.status == 200 ) {\\n      that.loadCallback(request.response);\\n    }\\n  };\\n\\n  request.onprogress = this.gl\\n    ? this.updateLoaderGL.bind(this)\\n    : this.updateLoader2D.bind(this);\\n\\n  request.open('GET', url);\\n  request.responseType = \\\"arraybuffer\\\";\\n  request.send();\\n};\\n\\njsmpeg.prototype.updateLoader2D = function( ev ) {\\n  var\\n    p = ev.loaded / ev.total,\\n    w = this.canvas.width,\\n    h = this.canvas.height,\\n    ctx = this.canvasContext;\\n\\n  ctx.fillStyle = '#222';\\n  ctx.fillRect(0, 0, w, h);\\n  ctx.fillStyle = '#fff';\\n  ctx.fillRect(0, h - h*p, w, h*p);\\n};\\n\\njsmpeg.prototype.updateLoaderGL = function( ev ) {\\n  var gl = this.gl;\\n  gl.uniform1f(gl.getUniformLocation(this.loadingProgram, 'loaded'), (ev.loaded / ev.total));\\n  gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\\n};\\n\\njsmpeg.prototype.loadCallback = function(file) {\\n  this.buffer = new BitReader(file);\\n\\n  if( this.seekable ) {\\n    this.collectIntraFrames();\\n    this.buffer.index = 0;\\n  }\\n\\n  this.findStartCode(START_SEQUENCE);\\n  this.firstSequenceHeader = this.buffer.index;\\n  this.decodeSequenceHeader();\\n\\n  // Calculate the duration. This only works if the video is seekable and we have a frame count\\n  this.duration = this.frameCount / this.pictureRate;\\n\\n  // Load the first frame\\n  this.nextFrame();\\n\\n  if( this.autoplay ) {\\n    this.play();\\n  }\\n\\n  if( this.externalLoadCallback ) {\\n    this.externalLoadCallback(this);\\n  }\\n};\\n\\njsmpeg.prototype.collectIntraFrames = function() {\\n  // Loop through the whole buffer and collect all intraFrames to build our seek index.\\n  // We also keep track of total frame count here\\n  var frame;\\n  for( frame = 0; this.findStartCode(START_PICTURE) !== BitReader.NOT_FOUND; frame++ ) {\\n\\n    // Check if the found picture is an intra frame and remember the position\\n    this.buffer.advance(10); // skip temporalReference\\n    if( this.buffer.getBits(3) == PICTURE_TYPE_I ) {\\n      // Remember index 13 bits back, before temporalReference and picture type\\n      this.intraFrames.push({frame: frame, index: this.buffer.index - 13});\\n    }\\n  }\\n\\n  this.frameCount = frame;\\n};\\n\\njsmpeg.prototype.seekToFrame = function(seekFrame, seekExact) {\\n  if( seekFrame < 0 || seekFrame >= this.frameCount || !this.intraFrames.length ) {\\n    return false;\\n  }\\n\\n  // Find the last intra frame before or equal to seek frame\\n  var target = null;\\n  for( var i = 0; i < this.intraFrames.length && this.intraFrames[i].frame <= seekFrame; i++ ) {\\n    target = this.intraFrames[i];\\n  }\\n\\n  this.buffer.index = target.index;\\n  this.currentFrame = target.frame-1;\\n\\n  // If we're seeking to the exact frame, we may have to decode some more frames before\\n  // the one we want\\n  if( seekExact ) {\\n    for( var frame = target.frame; frame < seekFrame; frame++ ) {\\n      this.decodePicture(DECODE_SKIP_OUTPUT);\\n      this.findStartCode(START_PICTURE);\\n    }\\n    this.currentFrame = seekFrame-1;\\n  }\\n\\n  // Decode and display the picture we have seeked to\\n  this.decodePicture();\\n  return true;\\n};\\n\\njsmpeg.prototype.seekToTime = function(time, seekExact) {\\n  this.seekToFrame( (time * this.pictureRate)|0, seekExact );\\n};\\n\\njsmpeg.prototype.play = function(file) {\\n  if( this.playing ) { return; }\\n  this.targetTime = this.now();\\n  this.playing = true;\\n  this.scheduleNextFrame();\\n};\\n\\njsmpeg.prototype.pause = function(file) {\\n  this.playing = false;\\n};\\n\\njsmpeg.prototype.stop = function(file) {\\n  this.currentFrame = -1;\\n  if( this.buffer ) {\\n    this.buffer.index = this.firstSequenceHeader;\\n  }\\n  this.playing = false;\\n  if( this.client ) {\\n    this.client.close();\\n    this.client = null;\\n  }\\n};\\n\\n\\n\\n// ----------------------------------------------------------------------------\\n// Utilities\\n\\njsmpeg.prototype.readCode = function(codeTable) {\\n  var state = 0;\\n  do {\\n    state = codeTable[state + this.buffer.getBits(1)];\\n  } while( state >= 0 && codeTable[state] != 0 );\\n  return codeTable[state+2];\\n};\\n\\njsmpeg.prototype.findStartCode = function( code ) {\\n  var current = 0;\\n  while( true ) {\\n    current = this.buffer.findNextMPEGStartCode();\\n    if( current == code || current == BitReader.NOT_FOUND ) {\\n      return current;\\n    }\\n  }\\n  return BitReader.NOT_FOUND;\\n};\\n\\njsmpeg.prototype.fillArray = function(a, value) {\\n  for( var i = 0, length = a.length; i < length; i++ ) {\\n    a[i] = value;\\n  }\\n};\\n\\n\\n\\n// ----------------------------------------------------------------------------\\n// Sequence Layer\\n\\njsmpeg.prototype.pictureRate = 30;\\njsmpeg.prototype.lateTime = 0;\\njsmpeg.prototype.firstSequenceHeader = 0;\\njsmpeg.prototype.targetTime = 0;\\n\\njsmpeg.prototype.benchmark = false;\\njsmpeg.prototype.benchFrame = 0;\\njsmpeg.prototype.benchDecodeTimes = 0;\\njsmpeg.prototype.benchAvgFrameTime = 0;\\n\\njsmpeg.prototype.now = function() {\\n  return window.performance\\n    ? window.performance.now()\\n    : Date.now();\\n}\\n\\njsmpeg.prototype.nextFrame = function() {\\n  if( !this.buffer ) { return; }\\n\\n  var frameStart = this.now();\\n  while(true) {\\n    var code = this.buffer.findNextMPEGStartCode();\\n\\n    if( code == START_SEQUENCE ) {\\n      this.decodeSequenceHeader();\\n    }\\n    else if( code == START_PICTURE ) {\\n      if( this.playing ) {\\n        this.scheduleNextFrame();\\n      }\\n      this.decodePicture();\\n      this.benchDecodeTimes += this.now() - frameStart;\\n      return this.canvas;\\n    }\\n    else if( code == BitReader.NOT_FOUND ) {\\n      this.stop(); // Jump back to the beginning\\n\\n      if( this.externalFinishedCallback ) {\\n        this.externalFinishedCallback(this);\\n      }\\n\\n      // Only loop if we found a sequence header\\n      if( this.loop && this.sequenceStarted ) {\\n        this.play();\\n      }\\n      return null;\\n    }\\n    else {\\n      // ignore (GROUP, USER_DATA, EXTENSION, SLICES...)\\n    }\\n  }\\n};\\n\\njsmpeg.prototype.scheduleNextFrame = function() {\\n  this.lateTime = this.now() - this.targetTime;\\n  var wait = Math.max(0, (1000/this.pictureRate) - this.lateTime);\\n  this.targetTime = this.now() + wait;\\n\\n  if( this.benchmark ) {\\n    this.benchFrame++;\\n    if( this.benchFrame >= 120 ) {\\n      this.benchAvgFrameTime = this.benchDecodeTimes / this.benchFrame;\\n      this.benchFrame = 0;\\n      this.benchDecodeTimes = 0;\\n      if( window.console ) { console.log(\\\"Average time per frame:\\\", this.benchAvgFrameTime, 'ms'); }\\n    }\\n    setTimeout( this.nextFrame.bind(this), 0);\\n  }\\n  else if( wait < 18) {\\n    this.scheduleAnimation();\\n  }\\n  else {\\n    setTimeout( this.scheduleAnimation.bind(this), wait );\\n  }\\n};\\n\\njsmpeg.prototype.scheduleAnimation = function() {\\n  requestAnimFrame( this.nextFrame.bind(this), this.canvas );\\n};\\n\\njsmpeg.prototype.decodeSequenceHeader = function() {\\n  this.width = this.buffer.getBits(12);\\n  this.height = this.buffer.getBits(12);\\n  this.buffer.advance(4); // skip pixel aspect ratio\\n  this.pictureRate = PICTURE_RATE[this.buffer.getBits(4)];\\n  this.buffer.advance(18 + 1 + 10 + 1); // skip bitRate, marker, bufferSize and constrained bit\\n\\n  this.initBuffers();\\n\\n  if( this.buffer.getBits(1) ) { // load custom intra quant matrix?\\n    for( var i = 0; i < 64; i++ ) {\\n      this.customIntraQuantMatrix[ZIG_ZAG[i]] = this.buffer.getBits(8);\\n    }\\n    this.intraQuantMatrix = this.customIntraQuantMatrix;\\n  }\\n\\n  if( this.buffer.getBits(1) ) { // load custom non intra quant matrix?\\n    for( var i = 0; i < 64; i++ ) {\\n      this.customNonIntraQuantMatrix[ZIG_ZAG[i]] = this.buffer.getBits(8);\\n    }\\n    this.nonIntraQuantMatrix = this.customNonIntraQuantMatrix;\\n  }\\n};\\n\\njsmpeg.prototype.initBuffers = function() {\\n  this.intraQuantMatrix = DEFAULT_INTRA_QUANT_MATRIX;\\n  this.nonIntraQuantMatrix = DEFAULT_NON_INTRA_QUANT_MATRIX;\\n\\n  this.mbWidth = (this.width + 15) >> 4;\\n  this.mbHeight = (this.height + 15) >> 4;\\n  this.mbSize = this.mbWidth * this.mbHeight;\\n\\n  this.codedWidth = this.mbWidth << 4;\\n  this.codedHeight = this.mbHeight << 4;\\n  this.codedSize = this.codedWidth * this.codedHeight;\\n\\n  this.halfWidth = this.mbWidth << 3;\\n  this.halfHeight = this.mbHeight << 3;\\n  this.quarterSize = this.codedSize >> 2;\\n\\n  // Sequence already started? Don't allocate buffers again\\n  if( this.sequenceStarted ) { return; }\\n  this.sequenceStarted = true;\\n\\n\\n  // Manually clamp values when writing macroblocks for shitty browsers\\n  // that don't support Uint8ClampedArray\\n  var MaybeClampedUint8Array = window.Uint8ClampedArray || window.Uint8Array;\\n  if( !window.Uint8ClampedArray ) {\\n    this.copyBlockToDestination = this.copyBlockToDestinationClamp;\\n    this.addBlockToDestination = this.addBlockToDestinationClamp;\\n  }\\n\\n  // Allocated buffers and resize the canvas\\n  this.currentY = new MaybeClampedUint8Array(this.codedSize);\\n  this.currentY32 = new Uint32Array(this.currentY.buffer);\\n\\n  this.currentCr = new MaybeClampedUint8Array(this.codedSize >> 2);\\n  this.currentCr32 = new Uint32Array(this.currentCr.buffer);\\n\\n  this.currentCb = new MaybeClampedUint8Array(this.codedSize >> 2);\\n  this.currentCb32 = new Uint32Array(this.currentCb.buffer);\\n\\n\\n  this.forwardY = new MaybeClampedUint8Array(this.codedSize);\\n  this.forwardY32 = new Uint32Array(this.forwardY.buffer);\\n\\n  this.forwardCr = new MaybeClampedUint8Array(this.codedSize >> 2);\\n  this.forwardCr32 = new Uint32Array(this.forwardCr.buffer);\\n\\n  this.forwardCb = new MaybeClampedUint8Array(this.codedSize >> 2);\\n  this.forwardCb32 = new Uint32Array(this.forwardCb.buffer);\\n\\n  this.canvas.width = this.width;\\n  this.canvas.height = this.height;\\n\\n  if( this.gl ) {\\n    this.gl.useProgram(this.program);\\n    this.gl.viewport(0, 0, this.width, this.height);\\n  }\\n  else {\\n    this.currentRGBA = this.canvasContext.getImageData(0, 0, this.width, this.height);\\n    this.fillArray(this.currentRGBA.data, 255);\\n  }\\n};\\n\\n\\n\\n\\n// ----------------------------------------------------------------------------\\n// Picture Layer\\n\\njsmpeg.prototype.currentY = null;\\njsmpeg.prototype.currentCr = null;\\njsmpeg.prototype.currentCb = null;\\n\\njsmpeg.prototype.currentRGBA = null;\\n\\njsmpeg.prototype.pictureCodingType = 0;\\n\\n// Buffers for motion compensation\\njsmpeg.prototype.forwardY = null;\\njsmpeg.prototype.forwardCr = null;\\njsmpeg.prototype.forwardCb = null;\\n\\njsmpeg.prototype.fullPelForward = false;\\njsmpeg.prototype.forwardFCode = 0;\\njsmpeg.prototype.forwardRSize = 0;\\njsmpeg.prototype.forwardF = 0;\\n\\n\\njsmpeg.prototype.decodePicture = function(skipOutput) {\\n  this.currentFrame++;\\n  this.currentTime = this.currentFrame / this.pictureRate;\\n\\n  this.buffer.advance(10); // skip temporalReference\\n  this.pictureCodingType = this.buffer.getBits(3);\\n  this.buffer.advance(16); // skip vbv_delay\\n\\n  // Skip B and D frames or unknown coding type\\n  if( this.pictureCodingType <= 0 || this.pictureCodingType >= PICTURE_TYPE_B ) {\\n    return;\\n  }\\n\\n  // full_pel_forward, forward_f_code\\n  if( this.pictureCodingType == PICTURE_TYPE_P ) {\\n    this.fullPelForward = this.buffer.getBits(1);\\n    this.forwardFCode = this.buffer.getBits(3);\\n    if( this.forwardFCode == 0 ) {\\n      // Ignore picture with zero forward_f_code\\n      return;\\n    }\\n    this.forwardRSize = this.forwardFCode - 1;\\n    this.forwardF = 1 << this.forwardRSize;\\n  }\\n\\n  var code = 0;\\n  do {\\n    code = this.buffer.findNextMPEGStartCode();\\n  } while( code == START_EXTENSION || code == START_USER_DATA );\\n\\n\\n  while( code >= START_SLICE_FIRST && code <= START_SLICE_LAST ) {\\n    this.decodeSlice( (code & 0x000000FF) );\\n    code = this.buffer.findNextMPEGStartCode();\\n  }\\n\\n  // We found the next start code; rewind 32bits and let the main loop handle it.\\n  this.buffer.rewind(32);\\n\\n  // Record this frame, if the recorder wants it\\n  this.recordFrameFromCurrentBuffer();\\n\\n\\n  if( skipOutput != DECODE_SKIP_OUTPUT ) {\\n    this.renderFrame();\\n\\n    if(this.externalDecodeCallback) {\\n      this.externalDecodeCallback(this, this.canvas);\\n    }\\n  }\\n\\n  // If this is a reference picutre then rotate the prediction pointers\\n  if( this.pictureCodingType == PICTURE_TYPE_I || this.pictureCodingType == PICTURE_TYPE_P ) {\\n    var\\n      tmpY = this.forwardY,\\n      tmpY32 = this.forwardY32,\\n      tmpCr = this.forwardCr,\\n      tmpCr32 = this.forwardCr32,\\n      tmpCb = this.forwardCb,\\n      tmpCb32 = this.forwardCb32;\\n\\n    this.forwardY = this.currentY;\\n    this.forwardY32 = this.currentY32;\\n    this.forwardCr = this.currentCr;\\n    this.forwardCr32 = this.currentCr32;\\n    this.forwardCb = this.currentCb;\\n    this.forwardCb32 = this.currentCb32;\\n\\n    this.currentY = tmpY;\\n    this.currentY32 = tmpY32;\\n    this.currentCr = tmpCr;\\n    this.currentCr32 = tmpCr32;\\n    this.currentCb = tmpCb;\\n    this.currentCb32 = tmpCb32;\\n  }\\n};\\n\\njsmpeg.prototype.YCbCrToRGBA = function() {\\n  var pY = this.currentY;\\n  var pCb = this.currentCb;\\n  var pCr = this.currentCr;\\n  var pRGBA = this.currentRGBA.data;\\n\\n  // Chroma values are the same for each block of 4 pixels, so we proccess\\n  // 2 lines at a time, 2 neighboring pixels each.\\n  // I wish we could use 32bit writes to the RGBA buffer instead of writing\\n  // each byte separately, but we need the automatic clamping of the RGBA\\n  // buffer.\\n\\n  var yIndex1 = 0;\\n  var yIndex2 = this.codedWidth;\\n  var yNext2Lines = this.codedWidth + (this.codedWidth - this.width);\\n\\n  var cIndex = 0;\\n  var cNextLine = this.halfWidth - (this.width >> 1);\\n\\n  var rgbaIndex1 = 0;\\n  var rgbaIndex2 = this.width * 4;\\n  var rgbaNext2Lines = this.width * 4;\\n\\n  var cols = this.width >> 1;\\n  var rows = this.height >> 1;\\n\\n  var y, cb, cr, r, g, b;\\n\\n  for( var row = 0; row < rows; row++ ) {\\n    for( var col = 0; col < cols; col++ ) {\\n      cb = pCb[cIndex];\\n      cr = pCr[cIndex];\\n      cIndex++;\\n\\n      r = (cr + ((cr * 103) >> 8)) - 179;\\n      g = ((cb * 88) >> 8) - 44 + ((cr * 183) >> 8) - 91;\\n      b = (cb + ((cb * 198) >> 8)) - 227;\\n\\n      // Line 1\\n      var y1 = pY[yIndex1++];\\n      var y2 = pY[yIndex1++];\\n      pRGBA[rgbaIndex1]   = y1 + r;\\n      pRGBA[rgbaIndex1+1] = y1 - g;\\n      pRGBA[rgbaIndex1+2] = y1 + b;\\n      pRGBA[rgbaIndex1+4] = y2 + r;\\n      pRGBA[rgbaIndex1+5] = y2 - g;\\n      pRGBA[rgbaIndex1+6] = y2 + b;\\n      rgbaIndex1 += 8;\\n\\n      // Line 2\\n      var y3 = pY[yIndex2++];\\n      var y4 = pY[yIndex2++];\\n      pRGBA[rgbaIndex2]   = y3 + r;\\n      pRGBA[rgbaIndex2+1] = y3 - g;\\n      pRGBA[rgbaIndex2+2] = y3 + b;\\n      pRGBA[rgbaIndex2+4] = y4 + r;\\n      pRGBA[rgbaIndex2+5] = y4 - g;\\n      pRGBA[rgbaIndex2+6] = y4 + b;\\n      rgbaIndex2 += 8;\\n    }\\n\\n    yIndex1 += yNext2Lines;\\n    yIndex2 += yNext2Lines;\\n    rgbaIndex1 += rgbaNext2Lines;\\n    rgbaIndex2 += rgbaNext2Lines;\\n    cIndex += cNextLine;\\n  }\\n};\\n\\njsmpeg.prototype.renderFrame2D = function() {\\n  this.YCbCrToRGBA();\\n  this.canvasContext.putImageData(this.currentRGBA, 0, 0);\\n};\\n\\n\\n// ----------------------------------------------------------------------------\\n// Accelerated WebGL YCbCrToRGBA conversion\\n\\njsmpeg.prototype.gl = null;\\njsmpeg.prototype.program = null;\\njsmpeg.prototype.YTexture = null;\\njsmpeg.prototype.CBTexture = null;\\njsmpeg.prototype.CRTexture = null;\\n\\njsmpeg.prototype.createTexture = function(index, name) {\\n  var gl = this.gl;\\n  var texture = gl.createTexture();\\n\\n  gl.bindTexture(gl.TEXTURE_2D, texture);\\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\\n  gl.uniform1i(gl.getUniformLocation(this.program, name), index);\\n\\n  return texture;\\n};\\n\\njsmpeg.prototype.compileShader = function(type, source) {\\n  var gl = this.gl;\\n  var shader = gl.createShader(type);\\n  gl.shaderSource(shader, source);\\n  gl.compileShader(shader);\\n\\n  if( !gl.getShaderParameter(shader, gl.COMPILE_STATUS) ) {\\n    throw new Error(gl.getShaderInfoLog(shader));\\n  }\\n\\n  return shader;\\n};\\n\\njsmpeg.prototype.initWebGL = function() {\\n  // attempt to get a webgl context\\n  try {\\n    var gl = this.gl = this.canvas.getContext('webgl') || this.canvas.getContext('experimental-webgl');\\n  } catch (e) {\\n    return false;\\n  }\\n\\n  if (!gl) {\\n    return false;\\n  }\\n\\n  // init buffers\\n  this.buffer = gl.createBuffer();\\n  gl.bindBuffer(gl.ARRAY_BUFFER, this.buffer);\\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]), gl.STATIC_DRAW);\\n\\n  // The main YCbCrToRGBA Shader\\n  this.program = gl.createProgram();\\n  gl.attachShader(this.program, this.compileShader(gl.VERTEX_SHADER, SHADER_VERTEX_IDENTITY));\\n  gl.attachShader(this.program, this.compileShader(gl.FRAGMENT_SHADER, SHADER_FRAGMENT_YCBCRTORGBA));\\n  gl.linkProgram(this.program);\\n\\n  if( !gl.getProgramParameter(this.program, gl.LINK_STATUS) ) {\\n    throw new Error(gl.getProgramInfoLog(this.program));\\n  }\\n\\n  gl.useProgram(this.program);\\n\\n  // setup textures\\n  this.YTexture = this.createTexture(0, 'YTexture');\\n  this.CBTexture = this.createTexture(1, 'CBTexture');\\n  this.CRTexture = this.createTexture(2, 'CRTexture');\\n\\n  var vertexAttr = gl.getAttribLocation(this.program, 'vertex');\\n  gl.enableVertexAttribArray(vertexAttr);\\n  gl.vertexAttribPointer(vertexAttr, 2, gl.FLOAT, false, 0, 0);\\n\\n\\n  // Shader for the loading screen\\n  this.loadingProgram = gl.createProgram();\\n  gl.attachShader(this.loadingProgram, this.compileShader(gl.VERTEX_SHADER, SHADER_VERTEX_IDENTITY));\\n  gl.attachShader(this.loadingProgram, this.compileShader(gl.FRAGMENT_SHADER, SHADER_FRAGMENT_LOADING));\\n  gl.linkProgram(this.loadingProgram);\\n\\n  gl.useProgram(this.loadingProgram);\\n\\n  vertexAttr = gl.getAttribLocation(this.loadingProgram, 'vertex');\\n  gl.enableVertexAttribArray(vertexAttr);\\n  gl.vertexAttribPointer(vertexAttr, 2, gl.FLOAT, false, 0, 0);\\n\\n  return true;\\n};\\n\\njsmpeg.prototype.renderFrameGL = function() {\\n  var gl = this.gl;\\n\\n  // WebGL doesn't like Uint8ClampedArrays, so we have to create a Uint8Array view for\\n  // each plane\\n  var uint8Y = new Uint8Array(this.currentY.buffer),\\n    uint8Cr = new Uint8Array(this.currentCr.buffer),\\n    uint8Cb = new Uint8Array(this.currentCb.buffer);\\n\\n  gl.activeTexture(gl.TEXTURE0);\\n  gl.bindTexture(gl.TEXTURE_2D, this.YTexture);\\n\\n  gl.texImage2D(gl.TEXTURE_2D, 0, gl.LUMINANCE, this.codedWidth, this.height, 0, gl.LUMINANCE, gl.UNSIGNED_BYTE, uint8Y);\\n\\n  gl.activeTexture(gl.TEXTURE1);\\n  gl.bindTexture(gl.TEXTURE_2D, this.CBTexture);\\n  gl.texImage2D(gl.TEXTURE_2D, 0, gl.LUMINANCE, this.halfWidth, this.height/2, 0, gl.LUMINANCE, gl.UNSIGNED_BYTE, uint8Cr);\\n\\n  gl.activeTexture(gl.TEXTURE2);\\n  gl.bindTexture(gl.TEXTURE_2D, this.CRTexture);\\n  gl.texImage2D(gl.TEXTURE_2D, 0, gl.LUMINANCE, this.halfWidth, this.height/2, 0, gl.LUMINANCE, gl.UNSIGNED_BYTE, uint8Cb);\\n\\n  gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\\n};\\n\\n\\n// ----------------------------------------------------------------------------\\n// Slice Layer\\n\\njsmpeg.prototype.quantizerScale = 0;\\njsmpeg.prototype.sliceBegin = false;\\n\\njsmpeg.prototype.decodeSlice = function(slice) {\\n  this.sliceBegin = true;\\n  this.macroblockAddress = (slice - 1) * this.mbWidth - 1;\\n\\n  // Reset motion vectors and DC predictors\\n  this.motionFwH = this.motionFwHPrev = 0;\\n  this.motionFwV = this.motionFwVPrev = 0;\\n  this.dcPredictorY  = 128;\\n  this.dcPredictorCr = 128;\\n  this.dcPredictorCb = 128;\\n\\n  this.quantizerScale = this.buffer.getBits(5);\\n\\n  // skip extra bits\\n  while( this.buffer.getBits(1) ) {\\n    this.buffer.advance(8);\\n  }\\n\\n  do {\\n    this.decodeMacroblock();\\n    // We may have to ignore Video Stream Start Codes here (0xE0)!?\\n  } while( !this.buffer.nextBytesAreStartCode() );\\n}\\n\\n\\n// ----------------------------------------------------------------------------\\n// Macroblock Layer\\n\\njsmpeg.prototype.macroblockAddress = 0;\\njsmpeg.prototype.mbRow = 0;\\njsmpeg.prototype.mbCol = 0;\\n\\njsmpeg.prototype.macroblockType = 0;\\njsmpeg.prototype.macroblockIntra = false;\\njsmpeg.prototype.macroblockMotFw = false;\\n\\njsmpeg.prototype.motionFwH = 0;\\njsmpeg.prototype.motionFwV = 0;\\njsmpeg.prototype.motionFwHPrev = 0;\\njsmpeg.prototype.motionFwVPrev = 0;\\n\\njsmpeg.prototype.decodeMacroblock = function() {\\n  // Decode macroblock_address_increment\\n  var\\n    increment = 0,\\n    t = this.readCode(MACROBLOCK_ADDRESS_INCREMENT);\\n\\n  while( t == 34 ) {\\n    // macroblock_stuffing\\n    t = this.readCode(MACROBLOCK_ADDRESS_INCREMENT);\\n  }\\n  while( t == 35 ) {\\n    // macroblock_escape\\n    increment += 33;\\n    t = this.readCode(MACROBLOCK_ADDRESS_INCREMENT);\\n  }\\n  increment += t;\\n\\n  // Process any skipped macroblocks\\n  if( this.sliceBegin ) {\\n    // The first macroblock_address_increment of each slice is relative\\n    // to beginning of the preverious row, not the preverious macroblock\\n    this.sliceBegin = false;\\n    this.macroblockAddress += increment;\\n  }\\n  else {\\n    if( this.macroblockAddress + increment >= this.mbSize ) {\\n      // Illegal (too large) macroblock_address_increment\\n      return;\\n    }\\n    if( increment > 1 ) {\\n      // Skipped macroblocks reset DC predictors\\n      this.dcPredictorY  = 128;\\n      this.dcPredictorCr = 128;\\n      this.dcPredictorCb = 128;\\n\\n      // Skipped macroblocks in P-pictures reset motion vectors\\n      if( this.pictureCodingType == PICTURE_TYPE_P ) {\\n        this.motionFwH = this.motionFwHPrev = 0;\\n        this.motionFwV = this.motionFwVPrev = 0;\\n      }\\n    }\\n\\n    // Predict skipped macroblocks\\n    while( increment > 1) {\\n      this.macroblockAddress++;\\n      this.mbRow = (this.macroblockAddress / this.mbWidth)|0;\\n      this.mbCol = this.macroblockAddress % this.mbWidth;\\n      this.copyMacroblock(this.motionFwH, this.motionFwV, this.forwardY, this.forwardCr, this.forwardCb);\\n      increment--;\\n    }\\n    this.macroblockAddress++;\\n  }\\n  this.mbRow = (this.macroblockAddress / this.mbWidth)|0;\\n  this.mbCol = this.macroblockAddress % this.mbWidth;\\n\\n  // Process the current macroblock\\n  this.macroblockType = this.readCode(MACROBLOCK_TYPE_TABLES[this.pictureCodingType]);\\n  this.macroblockIntra = (this.macroblockType & 0x01);\\n  this.macroblockMotFw = (this.macroblockType & 0x08);\\n\\n  // Quantizer scale\\n  if( (this.macroblockType & 0x10) != 0 ) {\\n    this.quantizerScale = this.buffer.getBits(5);\\n  }\\n\\n  if( this.macroblockIntra ) {\\n    // Intra-coded macroblocks reset motion vectors\\n    this.motionFwH = this.motionFwHPrev = 0;\\n    this.motionFwV = this.motionFwVPrev = 0;\\n  }\\n  else {\\n    // Non-intra macroblocks reset DC predictors\\n    this.dcPredictorY = 128;\\n    this.dcPredictorCr = 128;\\n    this.dcPredictorCb = 128;\\n\\n    this.decodeMotionVectors();\\n    this.copyMacroblock(this.motionFwH, this.motionFwV, this.forwardY, this.forwardCr, this.forwardCb);\\n  }\\n\\n  // Decode blocks\\n  var cbp = ((this.macroblockType & 0x02) != 0)\\n    ? this.readCode(CODE_BLOCK_PATTERN)\\n    : (this.macroblockIntra ? 0x3f : 0);\\n\\n  for( var block = 0, mask = 0x20; block < 6; block++ ) {\\n    if( (cbp & mask) != 0 ) {\\n      this.decodeBlock(block);\\n    }\\n    mask >>= 1;\\n  }\\n};\\n\\n\\njsmpeg.prototype.decodeMotionVectors = function() {\\n  var code, d, r = 0;\\n\\n  // Forward\\n  if( this.macroblockMotFw ) {\\n    // Horizontal forward\\n    code = this.readCode(MOTION);\\n    if( (code != 0) && (this.forwardF != 1) ) {\\n      r = this.buffer.getBits(this.forwardRSize);\\n      d = ((Math.abs(code) - 1) << this.forwardRSize) + r + 1;\\n      if( code < 0 ) {\\n        d = -d;\\n      }\\n    }\\n    else {\\n      d = code;\\n    }\\n\\n    this.motionFwHPrev += d;\\n    if( this.motionFwHPrev > (this.forwardF << 4) - 1 ) {\\n      this.motionFwHPrev -= this.forwardF << 5;\\n    }\\n    else if( this.motionFwHPrev < ((-this.forwardF) << 4) ) {\\n      this.motionFwHPrev += this.forwardF << 5;\\n    }\\n\\n    this.motionFwH = this.motionFwHPrev;\\n    if( this.fullPelForward ) {\\n      this.motionFwH <<= 1;\\n    }\\n\\n    // Vertical forward\\n    code = this.readCode(MOTION);\\n    if( (code != 0) && (this.forwardF != 1) ) {\\n      r = this.buffer.getBits(this.forwardRSize);\\n      d = ((Math.abs(code) - 1) << this.forwardRSize) + r + 1;\\n      if( code < 0 ) {\\n        d = -d;\\n      }\\n    }\\n    else {\\n      d = code;\\n    }\\n\\n    this.motionFwVPrev += d;\\n    if( this.motionFwVPrev > (this.forwardF << 4) - 1 ) {\\n      this.motionFwVPrev -= this.forwardF << 5;\\n    }\\n    else if( this.motionFwVPrev < ((-this.forwardF) << 4) ) {\\n      this.motionFwVPrev += this.forwardF << 5;\\n    }\\n\\n    this.motionFwV = this.motionFwVPrev;\\n    if( this.fullPelForward ) {\\n      this.motionFwV <<= 1;\\n    }\\n  }\\n  else if( this.pictureCodingType == PICTURE_TYPE_P ) {\\n    // No motion information in P-picture, reset vectors\\n    this.motionFwH = this.motionFwHPrev = 0;\\n    this.motionFwV = this.motionFwVPrev = 0;\\n  }\\n};\\n\\njsmpeg.prototype.copyMacroblock = function(motionH, motionV, sY, sCr, sCb ) {\\n  var\\n    width, scan,\\n    H, V, oddH, oddV,\\n    src, dest, last;\\n\\n  // We use 32bit writes here\\n  var dY = this.currentY32;\\n  var dCb = this.currentCb32;\\n  var dCr = this.currentCr32;\\n\\n  // Luminance\\n  width = this.codedWidth;\\n  scan = width - 16;\\n\\n  H = motionH >> 1;\\n  V = motionV >> 1;\\n  oddH = (motionH & 1) == 1;\\n  oddV = (motionV & 1) == 1;\\n\\n  src = ((this.mbRow << 4) + V) * width + (this.mbCol << 4) + H;\\n  dest = (this.mbRow * width + this.mbCol) << 2;\\n  last = dest + (width << 2);\\n\\n  var y1, y2, y;\\n  if( oddH ) {\\n    if( oddV ) {\\n      while( dest < last ) {\\n        y1 = sY[src] + sY[src+width]; src++;\\n        for( var x = 0; x < 4; x++ ) {\\n          y2 = sY[src] + sY[src+width]; src++;\\n          y = (((y1 + y2 + 2) >> 2) & 0xff);\\n\\n          y1 = sY[src] + sY[src+width]; src++;\\n          y |= (((y1 + y2 + 2) << 6) & 0xff00);\\n\\n          y2 = sY[src] + sY[src+width]; src++;\\n          y |= (((y1 + y2 + 2) << 14) & 0xff0000);\\n\\n          y1 = sY[src] + sY[src+width]; src++;\\n          y |= (((y1 + y2 + 2) << 22) & 0xff000000);\\n\\n          dY[dest++] = y;\\n        }\\n        dest += scan >> 2; src += scan-1;\\n      }\\n    }\\n    else {\\n      while( dest < last ) {\\n        y1 = sY[src++];\\n        for( var x = 0; x < 4; x++ ) {\\n          y2 = sY[src++];\\n          y = (((y1 + y2 + 1) >> 1) & 0xff);\\n\\n          y1 = sY[src++];\\n          y |= (((y1 + y2 + 1) << 7) & 0xff00);\\n\\n          y2 = sY[src++];\\n          y |= (((y1 + y2 + 1) << 15) & 0xff0000);\\n\\n          y1 = sY[src++];\\n          y |= (((y1 + y2 + 1) << 23) & 0xff000000);\\n\\n          dY[dest++] = y;\\n        }\\n        dest += scan >> 2; src += scan-1;\\n      }\\n    }\\n  }\\n  else {\\n    if( oddV ) {\\n      while( dest < last ) {\\n        for( var x = 0; x < 4; x++ ) {\\n          y = (((sY[src] + sY[src+width] + 1) >> 1) & 0xff); src++;\\n          y |= (((sY[src] + sY[src+width] + 1) << 7) & 0xff00); src++;\\n          y |= (((sY[src] + sY[src+width] + 1) << 15) & 0xff0000); src++;\\n          y |= (((sY[src] + sY[src+width] + 1) << 23) & 0xff000000); src++;\\n\\n          dY[dest++] = y;\\n        }\\n        dest += scan >> 2; src += scan;\\n      }\\n    }\\n    else {\\n      while( dest < last ) {\\n        for( var x = 0; x < 4; x++ ) {\\n          y = sY[src]; src++;\\n          y |= sY[src] << 8; src++;\\n          y |= sY[src] << 16; src++;\\n          y |= sY[src] << 24; src++;\\n\\n          dY[dest++] = y;\\n        }\\n        dest += scan >> 2; src += scan;\\n      }\\n    }\\n  }\\n\\n  // Chrominance\\n\\n  width = this.halfWidth;\\n  scan = width - 8;\\n\\n  H = (motionH/2) >> 1;\\n  V = (motionV/2) >> 1;\\n  oddH = ((motionH/2) & 1) == 1;\\n  oddV = ((motionV/2) & 1) == 1;\\n\\n  src = ((this.mbRow << 3) + V) * width + (this.mbCol << 3) + H;\\n  dest = (this.mbRow * width + this.mbCol) << 1;\\n  last = dest + (width << 1);\\n\\n  var cr1, cr2, cr;\\n  var cb1, cb2, cb;\\n  if( oddH ) {\\n    if( oddV ) {\\n      while( dest < last ) {\\n        cr1 = sCr[src] + sCr[src+width];\\n        cb1 = sCb[src] + sCb[src+width];\\n        src++;\\n        for( var x = 0; x < 2; x++ ) {\\n          cr2 = sCr[src] + sCr[src+width];\\n          cb2 = sCb[src] + sCb[src+width]; src++;\\n          cr = (((cr1 + cr2 + 2) >> 2) & 0xff);\\n          cb = (((cb1 + cb2 + 2) >> 2) & 0xff);\\n\\n          cr1 = sCr[src] + sCr[src+width];\\n          cb1 = sCb[src] + sCb[src+width]; src++;\\n          cr |= (((cr1 + cr2 + 2) << 6) & 0xff00);\\n          cb |= (((cb1 + cb2 + 2) << 6) & 0xff00);\\n\\n          cr2 = sCr[src] + sCr[src+width];\\n          cb2 = sCb[src] + sCb[src+width]; src++;\\n          cr |= (((cr1 + cr2 + 2) << 14) & 0xff0000);\\n          cb |= (((cb1 + cb2 + 2) << 14) & 0xff0000);\\n\\n          cr1 = sCr[src] + sCr[src+width];\\n          cb1 = sCb[src] + sCb[src+width]; src++;\\n          cr |= (((cr1 + cr2 + 2) << 22) & 0xff000000);\\n          cb |= (((cb1 + cb2 + 2) << 22) & 0xff000000);\\n\\n          dCr[dest] = cr;\\n          dCb[dest] = cb;\\n          dest++;\\n        }\\n        dest += scan >> 2; src += scan-1;\\n      }\\n    }\\n    else {\\n      while( dest < last ) {\\n        cr1 = sCr[src];\\n        cb1 = sCb[src];\\n        src++;\\n        for( var x = 0; x < 2; x++ ) {\\n          cr2 = sCr[src];\\n          cb2 = sCb[src++];\\n          cr = (((cr1 + cr2 + 1) >> 1) & 0xff);\\n          cb = (((cb1 + cb2 + 1) >> 1) & 0xff);\\n\\n          cr1 = sCr[src];\\n          cb1 = sCb[src++];\\n          cr |= (((cr1 + cr2 + 1) << 7) & 0xff00);\\n          cb |= (((cb1 + cb2 + 1) << 7) & 0xff00);\\n\\n          cr2 = sCr[src];\\n          cb2 = sCb[src++];\\n          cr |= (((cr1 + cr2 + 1) << 15) & 0xff0000);\\n          cb |= (((cb1 + cb2 + 1) << 15) & 0xff0000);\\n\\n          cr1 = sCr[src];\\n          cb1 = sCb[src++];\\n          cr |= (((cr1 + cr2 + 1) << 23) & 0xff000000);\\n          cb |= (((cb1 + cb2 + 1) << 23) & 0xff000000);\\n\\n          dCr[dest] = cr;\\n          dCb[dest] = cb;\\n          dest++;\\n        }\\n        dest += scan >> 2; src += scan-1;\\n      }\\n    }\\n  }\\n  else {\\n    if( oddV ) {\\n      while( dest < last ) {\\n        for( var x = 0; x < 2; x++ ) {\\n          cr = (((sCr[src] + sCr[src+width] + 1) >> 1) & 0xff);\\n          cb = (((sCb[src] + sCb[src+width] + 1) >> 1) & 0xff); src++;\\n\\n          cr |= (((sCr[src] + sCr[src+width] + 1) << 7) & 0xff00);\\n          cb |= (((sCb[src] + sCb[src+width] + 1) << 7) & 0xff00); src++;\\n\\n          cr |= (((sCr[src] + sCr[src+width] + 1) << 15) & 0xff0000);\\n          cb |= (((sCb[src] + sCb[src+width] + 1) << 15) & 0xff0000); src++;\\n\\n          cr |= (((sCr[src] + sCr[src+width] + 1) << 23) & 0xff000000);\\n          cb |= (((sCb[src] + sCb[src+width] + 1) << 23) & 0xff000000); src++;\\n\\n          dCr[dest] = cr;\\n          dCb[dest] = cb;\\n          dest++;\\n        }\\n        dest += scan >> 2; src += scan;\\n      }\\n    }\\n    else {\\n      while( dest < last ) {\\n        for( var x = 0; x < 2; x++ ) {\\n          cr = sCr[src];\\n          cb = sCb[src]; src++;\\n\\n          cr |= sCr[src] << 8;\\n          cb |= sCb[src] << 8; src++;\\n\\n          cr |= sCr[src] << 16;\\n          cb |= sCb[src] << 16; src++;\\n\\n          cr |= sCr[src] << 24;\\n          cb |= sCb[src] << 24; src++;\\n\\n          dCr[dest] = cr;\\n          dCb[dest] = cb;\\n          dest++;\\n        }\\n        dest += scan >> 2; src += scan;\\n      }\\n    }\\n  }\\n};\\n\\n\\n// ----------------------------------------------------------------------------\\n// Block layer\\n\\njsmpeg.prototype.dcPredictorY;\\njsmpeg.prototype.dcPredictorCr;\\njsmpeg.prototype.dcPredictorCb;\\n\\njsmpeg.prototype.blockData = null;\\njsmpeg.prototype.decodeBlock = function(block) {\\n\\n  var\\n    n = 0,\\n    quantMatrix;\\n\\n  // Decode DC coefficient of intra-coded blocks\\n  if( this.macroblockIntra ) {\\n    var\\n      predictor,\\n      dctSize;\\n\\n    // DC prediction\\n\\n    if( block < 4 ) {\\n      predictor = this.dcPredictorY;\\n      dctSize = this.readCode(DCT_DC_SIZE_LUMINANCE);\\n    }\\n    else {\\n      predictor = (block == 4 ? this.dcPredictorCr : this.dcPredictorCb);\\n      dctSize = this.readCode(DCT_DC_SIZE_CHROMINANCE);\\n    }\\n\\n    // Read DC coeff\\n    if( dctSize > 0 ) {\\n      var differential = this.buffer.getBits(dctSize);\\n      if( (differential & (1 << (dctSize - 1))) != 0 ) {\\n        this.blockData[0] = predictor + differential;\\n      }\\n      else {\\n        this.blockData[0] = predictor + ((-1 << dctSize)|(differential+1));\\n      }\\n    }\\n    else {\\n      this.blockData[0] = predictor;\\n    }\\n\\n    // Save predictor value\\n    if( block < 4 ) {\\n      this.dcPredictorY = this.blockData[0];\\n    }\\n    else if( block == 4 ) {\\n      this.dcPredictorCr = this.blockData[0];\\n    }\\n    else {\\n      this.dcPredictorCb = this.blockData[0];\\n    }\\n\\n    // Dequantize + premultiply\\n    this.blockData[0] <<= (3 + 5);\\n\\n    quantMatrix = this.intraQuantMatrix;\\n    n = 1;\\n  }\\n  else {\\n    quantMatrix = this.nonIntraQuantMatrix;\\n  }\\n\\n  // Decode AC coefficients (+DC for non-intra)\\n  var level = 0;\\n  while( true ) {\\n    var\\n      run = 0,\\n      coeff = this.readCode(DCT_COEFF);\\n\\n    if( (coeff == 0x0001) && (n > 0) && (this.buffer.getBits(1) == 0) ) {\\n      // end_of_block\\n      break;\\n    }\\n    if( coeff == 0xffff ) {\\n      // escape\\n      run = this.buffer.getBits(6);\\n      level = this.buffer.getBits(8);\\n      if( level == 0 ) {\\n        level = this.buffer.getBits(8);\\n      }\\n      else if( level == 128 ) {\\n        level = this.buffer.getBits(8) - 256;\\n      }\\n      else if( level > 128 ) {\\n        level = level - 256;\\n      }\\n    }\\n    else {\\n      run = coeff >> 8;\\n      level = coeff & 0xff;\\n      if( this.buffer.getBits(1) ) {\\n        level = -level;\\n      }\\n    }\\n\\n    n += run;\\n    var dezigZagged = ZIG_ZAG[n];\\n    n++;\\n\\n    // Dequantize, oddify, clip\\n    level <<= 1;\\n    if( !this.macroblockIntra ) {\\n      level += (level < 0 ? -1 : 1);\\n    }\\n    level = (level * this.quantizerScale * quantMatrix[dezigZagged]) >> 4;\\n    if( (level & 1) == 0 ) {\\n      level -= level > 0 ? 1 : -1;\\n    }\\n    if( level > 2047 ) {\\n      level = 2047;\\n    }\\n    else if( level < -2048 ) {\\n      level = -2048;\\n    }\\n\\n    // Save premultiplied coefficient\\n    this.blockData[dezigZagged] = level * PREMULTIPLIER_MATRIX[dezigZagged];\\n  };\\n\\n  // Move block to its place\\n  var\\n    destArray,\\n    destIndex,\\n    scan;\\n\\n  if( block < 4 ) {\\n    destArray = this.currentY;\\n    scan = this.codedWidth - 8;\\n    destIndex = (this.mbRow * this.codedWidth + this.mbCol) << 4;\\n    if( (block & 1) != 0 ) {\\n      destIndex += 8;\\n    }\\n    if( (block & 2) != 0 ) {\\n      destIndex += this.codedWidth << 3;\\n    }\\n  }\\n  else {\\n    destArray = (block == 4) ? this.currentCb : this.currentCr;\\n    scan = (this.codedWidth >> 1) - 8;\\n    destIndex = ((this.mbRow * this.codedWidth) << 2) + (this.mbCol << 3);\\n  }\\n\\n  if( this.macroblockIntra ) {\\n    // Overwrite (no prediction)\\n    if (n == 1) {\\n      this.copyValueToDestination((this.blockData[0] + 128) >> 8, destArray, destIndex, scan);\\n      this.blockData[0] = 0;\\n    } else {\\n      this.IDCT();\\n      this.copyBlockToDestination(this.blockData, destArray, destIndex, scan);\\n      this.blockData.set(this.zeroBlockData);\\n    }\\n  }\\n  else {\\n    // Add data to the predicted macroblock\\n    if (n == 1) {\\n      this.addValueToDestination((this.blockData[0] + 128) >> 8, destArray, destIndex, scan);\\n      this.blockData[0] = 0;\\n    } else {\\n      this.IDCT();\\n      this.addBlockToDestination(this.blockData, destArray, destIndex, scan);\\n      this.blockData.set(this.zeroBlockData);\\n    }\\n  }\\n\\n  n = 0;\\n};\\n\\njsmpeg.prototype.copyBlockToDestination = function(blockData, destArray, destIndex, scan) {\\n  for( var n = 0; n < 64; n += 8, destIndex += scan+8 ) {\\n    destArray[destIndex+0] = blockData[n+0];\\n    destArray[destIndex+1] = blockData[n+1];\\n    destArray[destIndex+2] = blockData[n+2];\\n    destArray[destIndex+3] = blockData[n+3];\\n    destArray[destIndex+4] = blockData[n+4];\\n    destArray[destIndex+5] = blockData[n+5];\\n    destArray[destIndex+6] = blockData[n+6];\\n    destArray[destIndex+7] = blockData[n+7];\\n  }\\n};\\n\\njsmpeg.prototype.addBlockToDestination = function(blockData, destArray, destIndex, scan) {\\n  for( var n = 0; n < 64; n += 8, destIndex += scan+8 ) {\\n    destArray[destIndex+0] += blockData[n+0];\\n    destArray[destIndex+1] += blockData[n+1];\\n    destArray[destIndex+2] += blockData[n+2];\\n    destArray[destIndex+3] += blockData[n+3];\\n    destArray[destIndex+4] += blockData[n+4];\\n    destArray[destIndex+5] += blockData[n+5];\\n    destArray[destIndex+6] += blockData[n+6];\\n    destArray[destIndex+7] += blockData[n+7];\\n  }\\n};\\n\\njsmpeg.prototype.copyValueToDestination = function(value, destArray, destIndex, scan) {\\n  for( var n = 0; n < 64; n += 8, destIndex += scan+8 ) {\\n    destArray[destIndex+0] = value;\\n    destArray[destIndex+1] = value;\\n    destArray[destIndex+2] = value;\\n    destArray[destIndex+3] = value;\\n    destArray[destIndex+4] = value;\\n    destArray[destIndex+5] = value;\\n    destArray[destIndex+6] = value;\\n    destArray[destIndex+7] = value;\\n  }\\n};\\n\\njsmpeg.prototype.addValueToDestination = function(value, destArray, destIndex, scan) {\\n  for( var n = 0; n < 64; n += 8, destIndex += scan+8 ) {\\n    destArray[destIndex+0] += value;\\n    destArray[destIndex+1] += value;\\n    destArray[destIndex+2] += value;\\n    destArray[destIndex+3] += value;\\n    destArray[destIndex+4] += value;\\n    destArray[destIndex+5] += value;\\n    destArray[destIndex+6] += value;\\n    destArray[destIndex+7] += value;\\n  }\\n};\\n\\n// Clamping version for shitty browsers (IE) that don't support Uint8ClampedArray\\njsmpeg.prototype.copyBlockToDestinationClamp = function(blockData, destArray, destIndex, scan) {\\n  var n = 0;\\n  for( var i = 0; i < 8; i++ ) {\\n    for( var j = 0; j < 8; j++ ) {\\n      var p = blockData[n++];\\n      destArray[destIndex++] = p > 255 ? 255 : (p < 0 ? 0 : p);\\n    }\\n    destIndex += scan;\\n  }\\n};\\n\\njsmpeg.prototype.addBlockToDestinationClamp = function(blockData, destArray, destIndex, scan) {\\n  var n = 0;\\n  for( var i = 0; i < 8; i++ ) {\\n    for( var j = 0; j < 8; j++ ) {\\n      var p = blockData[n++] + destArray[destIndex];\\n      destArray[destIndex++] = p > 255 ? 255 : (p < 0 ? 0 : p);\\n    }\\n    destIndex += scan;\\n  }\\n};\\n\\njsmpeg.prototype.IDCT = function() {\\n  // See http://vsr.informatik.tu-chemnitz.de/~jan/MPEG/HTML/IDCT.html\\n  // for more info.\\n\\n  var\\n    b1, b3, b4, b6, b7, tmp1, tmp2, m0,\\n    x0, x1, x2, x3, x4, y3, y4, y5, y6, y7,\\n    i,\\n    blockData = this.blockData;\\n\\n  // Transform columns\\n  for( i = 0; i < 8; ++i ) {\\n    b1 =  blockData[4*8+i];\\n    b3 =  blockData[2*8+i] + blockData[6*8+i];\\n    b4 =  blockData[5*8+i] - blockData[3*8+i];\\n    tmp1 = blockData[1*8+i] + blockData[7*8+i];\\n    tmp2 = blockData[3*8+i] + blockData[5*8+i];\\n    b6 = blockData[1*8+i] - blockData[7*8+i];\\n    b7 = tmp1 + tmp2;\\n    m0 =  blockData[0*8+i];\\n    x4 =  ((b6*473 - b4*196 + 128) >> 8) - b7;\\n    x0 =  x4 - (((tmp1 - tmp2)*362 + 128) >> 8);\\n    x1 =  m0 - b1;\\n    x2 =  (((blockData[2*8+i] - blockData[6*8+i])*362 + 128) >> 8) - b3;\\n    x3 =  m0 + b1;\\n    y3 =  x1 + x2;\\n    y4 =  x3 + b3;\\n    y5 =  x1 - x2;\\n    y6 =  x3 - b3;\\n    y7 = -x0 - ((b4*473 + b6*196 + 128) >> 8);\\n    blockData[0*8+i] =  b7 + y4;\\n    blockData[1*8+i] =  x4 + y3;\\n    blockData[2*8+i] =  y5 - x0;\\n    blockData[3*8+i] =  y6 - y7;\\n    blockData[4*8+i] =  y6 + y7;\\n    blockData[5*8+i] =  x0 + y5;\\n    blockData[6*8+i] =  y3 - x4;\\n    blockData[7*8+i] =  y4 - b7;\\n  }\\n\\n  // Transform rows\\n  for( i = 0; i < 64; i += 8 ) {\\n    b1 =  blockData[4+i];\\n    b3 =  blockData[2+i] + blockData[6+i];\\n    b4 =  blockData[5+i] - blockData[3+i];\\n    tmp1 = blockData[1+i] + blockData[7+i];\\n    tmp2 = blockData[3+i] + blockData[5+i];\\n    b6 = blockData[1+i] - blockData[7+i];\\n    b7 = tmp1 + tmp2;\\n    m0 =  blockData[0+i];\\n    x4 =  ((b6*473 - b4*196 + 128) >> 8) - b7;\\n    x0 =  x4 - (((tmp1 - tmp2)*362 + 128) >> 8);\\n    x1 =  m0 - b1;\\n    x2 =  (((blockData[2+i] - blockData[6+i])*362 + 128) >> 8) - b3;\\n    x3 =  m0 + b1;\\n    y3 =  x1 + x2;\\n    y4 =  x3 + b3;\\n    y5 =  x1 - x2;\\n    y6 =  x3 - b3;\\n    y7 = -x0 - ((b4*473 + b6*196 + 128) >> 8);\\n    blockData[0+i] =  (b7 + y4 + 128) >> 8;\\n    blockData[1+i] =  (x4 + y3 + 128) >> 8;\\n    blockData[2+i] =  (y5 - x0 + 128) >> 8;\\n    blockData[3+i] =  (y6 - y7 + 128) >> 8;\\n    blockData[4+i] =  (y6 + y7 + 128) >> 8;\\n    blockData[5+i] =  (x0 + y5 + 128) >> 8;\\n    blockData[6+i] =  (y3 - x4 + 128) >> 8;\\n    blockData[7+i] =  (y4 - b7 + 128) >> 8;\\n  }\\n};\\n\\n\\n// ----------------------------------------------------------------------------\\n// VLC Tables and Constants\\n\\nvar\\n  SOCKET_MAGIC_BYTES = 'jsmp',\\n  DECODE_SKIP_OUTPUT = 1,\\n  PICTURE_RATE = [\\n    0.000, 23.976, 24.000, 25.000, 29.970, 30.000, 50.000, 59.940,\\n    60.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000\\n  ],\\n  ZIG_ZAG = new Uint8Array([\\n     0,  1,  8, 16,  9,  2,  3, 10,\\n    17, 24, 32, 25, 18, 11,  4,  5,\\n    12, 19, 26, 33, 40, 48, 41, 34,\\n    27, 20, 13,  6,  7, 14, 21, 28,\\n    35, 42, 49, 56, 57, 50, 43, 36,\\n    29, 22, 15, 23, 30, 37, 44, 51,\\n    58, 59, 52, 45, 38, 31, 39, 46,\\n    53, 60, 61, 54, 47, 55, 62, 63\\n  ]),\\n  DEFAULT_INTRA_QUANT_MATRIX = new Uint8Array([\\n     8, 16, 19, 22, 26, 27, 29, 34,\\n    16, 16, 22, 24, 27, 29, 34, 37,\\n    19, 22, 26, 27, 29, 34, 34, 38,\\n    22, 22, 26, 27, 29, 34, 37, 40,\\n    22, 26, 27, 29, 32, 35, 40, 48,\\n    26, 27, 29, 32, 35, 40, 48, 58,\\n    26, 27, 29, 34, 38, 46, 56, 69,\\n    27, 29, 35, 38, 46, 56, 69, 83\\n  ]),\\n  DEFAULT_NON_INTRA_QUANT_MATRIX = new Uint8Array([\\n    16, 16, 16, 16, 16, 16, 16, 16,\\n    16, 16, 16, 16, 16, 16, 16, 16,\\n    16, 16, 16, 16, 16, 16, 16, 16,\\n    16, 16, 16, 16, 16, 16, 16, 16,\\n    16, 16, 16, 16, 16, 16, 16, 16,\\n    16, 16, 16, 16, 16, 16, 16, 16,\\n    16, 16, 16, 16, 16, 16, 16, 16,\\n    16, 16, 16, 16, 16, 16, 16, 16\\n  ]),\\n\\n  PREMULTIPLIER_MATRIX = new Uint8Array([\\n    32, 44, 42, 38, 32, 25, 17,  9,\\n    44, 62, 58, 52, 44, 35, 24, 12,\\n    42, 58, 55, 49, 42, 33, 23, 12,\\n    38, 52, 49, 44, 38, 30, 20, 10,\\n    32, 44, 42, 38, 32, 25, 17,  9,\\n    25, 35, 33, 30, 25, 20, 14,  7,\\n    17, 24, 23, 20, 17, 14,  9,  5,\\n     9, 12, 12, 10,  9,  7,  5,  2\\n  ]),\\n\\n  // MPEG-1 VLC\\n\\n  //  macroblock_stuffing decodes as 34.\\n  //  macroblock_escape decodes as 35.\\n\\n  MACROBLOCK_ADDRESS_INCREMENT = new Int16Array([\\n     1*3,  2*3,  0, //   0\\n     3*3,  4*3,  0, //   1  0\\n       0,    0,  1, //   2  1.\\n     5*3,  6*3,  0, //   3  00\\n     7*3,  8*3,  0, //   4  01\\n     9*3, 10*3,  0, //   5  000\\n    11*3, 12*3,  0, //   6  001\\n       0,    0,  3, //   7  010.\\n       0,    0,  2, //   8  011.\\n    13*3, 14*3,  0, //   9  0000\\n    15*3, 16*3,  0, //  10  0001\\n       0,    0,  5, //  11  0010.\\n       0,    0,  4, //  12  0011.\\n    17*3, 18*3,  0, //  13  0000 0\\n    19*3, 20*3,  0, //  14  0000 1\\n       0,    0,  7, //  15  0001 0.\\n       0,    0,  6, //  16  0001 1.\\n    21*3, 22*3,  0, //  17  0000 00\\n    23*3, 24*3,  0, //  18  0000 01\\n    25*3, 26*3,  0, //  19  0000 10\\n    27*3, 28*3,  0, //  20  0000 11\\n      -1, 29*3,  0, //  21  0000 000\\n      -1, 30*3,  0, //  22  0000 001\\n    31*3, 32*3,  0, //  23  0000 010\\n    33*3, 34*3,  0, //  24  0000 011\\n    35*3, 36*3,  0, //  25  0000 100\\n    37*3, 38*3,  0, //  26  0000 101\\n       0,    0,  9, //  27  0000 110.\\n       0,    0,  8, //  28  0000 111.\\n    39*3, 40*3,  0, //  29  0000 0001\\n    41*3, 42*3,  0, //  30  0000 0011\\n    43*3, 44*3,  0, //  31  0000 0100\\n    45*3, 46*3,  0, //  32  0000 0101\\n       0,    0, 15, //  33  0000 0110.\\n       0,    0, 14, //  34  0000 0111.\\n       0,    0, 13, //  35  0000 1000.\\n       0,    0, 12, //  36  0000 1001.\\n       0,    0, 11, //  37  0000 1010.\\n       0,    0, 10, //  38  0000 1011.\\n    47*3,   -1,  0, //  39  0000 0001 0\\n      -1, 48*3,  0, //  40  0000 0001 1\\n    49*3, 50*3,  0, //  41  0000 0011 0\\n    51*3, 52*3,  0, //  42  0000 0011 1\\n    53*3, 54*3,  0, //  43  0000 0100 0\\n    55*3, 56*3,  0, //  44  0000 0100 1\\n    57*3, 58*3,  0, //  45  0000 0101 0\\n    59*3, 60*3,  0, //  46  0000 0101 1\\n    61*3,   -1,  0, //  47  0000 0001 00\\n      -1, 62*3,  0, //  48  0000 0001 11\\n    63*3, 64*3,  0, //  49  0000 0011 00\\n    65*3, 66*3,  0, //  50  0000 0011 01\\n    67*3, 68*3,  0, //  51  0000 0011 10\\n    69*3, 70*3,  0, //  52  0000 0011 11\\n    71*3, 72*3,  0, //  53  0000 0100 00\\n    73*3, 74*3,  0, //  54  0000 0100 01\\n       0,    0, 21, //  55  0000 0100 10.\\n       0,    0, 20, //  56  0000 0100 11.\\n       0,    0, 19, //  57  0000 0101 00.\\n       0,    0, 18, //  58  0000 0101 01.\\n       0,    0, 17, //  59  0000 0101 10.\\n       0,    0, 16, //  60  0000 0101 11.\\n       0,    0, 35, //  61  0000 0001 000. -- macroblock_escape\\n       0,    0, 34, //  62  0000 0001 111. -- macroblock_stuffing\\n       0,    0, 33, //  63  0000 0011 000.\\n       0,    0, 32, //  64  0000 0011 001.\\n       0,    0, 31, //  65  0000 0011 010.\\n       0,    0, 30, //  66  0000 0011 011.\\n       0,    0, 29, //  67  0000 0011 100.\\n       0,    0, 28, //  68  0000 0011 101.\\n       0,    0, 27, //  69  0000 0011 110.\\n       0,    0, 26, //  70  0000 0011 111.\\n       0,    0, 25, //  71  0000 0100 000.\\n       0,    0, 24, //  72  0000 0100 001.\\n       0,    0, 23, //  73  0000 0100 010.\\n       0,    0, 22  //  74  0000 0100 011.\\n  ]),\\n\\n  //  macroblock_type bitmap:\\n  //    0x10  macroblock_quant\\n  //    0x08  macroblock_motion_forward\\n  //    0x04  macroblock_motion_backward\\n  //    0x02  macrobkock_pattern\\n  //    0x01  macroblock_intra\\n  //\\n\\n  MACROBLOCK_TYPE_I = new Int8Array([\\n     1*3,  2*3,     0, //   0\\n      -1,  3*3,     0, //   1  0\\n       0,    0,  0x01, //   2  1.\\n       0,    0,  0x11  //   3  01.\\n  ]),\\n\\n  MACROBLOCK_TYPE_P = new Int8Array([\\n     1*3,  2*3,     0, //  0\\n     3*3,  4*3,     0, //  1  0\\n       0,    0,  0x0a, //  2  1.\\n     5*3,  6*3,     0, //  3  00\\n       0,    0,  0x02, //  4  01.\\n     7*3,  8*3,     0, //  5  000\\n       0,    0,  0x08, //  6  001.\\n     9*3, 10*3,     0, //  7  0000\\n    11*3, 12*3,     0, //  8  0001\\n      -1, 13*3,     0, //  9  00000\\n       0,    0,  0x12, // 10  00001.\\n       0,    0,  0x1a, // 11  00010.\\n       0,    0,  0x01, // 12  00011.\\n       0,    0,  0x11  // 13  000001.\\n  ]),\\n\\n  MACROBLOCK_TYPE_B = new Int8Array([\\n     1*3,  2*3,     0,  //  0\\n     3*3,  5*3,     0,  //  1  0\\n     4*3,  6*3,     0,  //  2  1\\n     8*3,  7*3,     0,  //  3  00\\n       0,    0,  0x0c,  //  4  10.\\n     9*3, 10*3,     0,  //  5  01\\n       0,    0,  0x0e,  //  6  11.\\n    13*3, 14*3,     0,  //  7  001\\n    12*3, 11*3,     0,  //  8  000\\n       0,    0,  0x04,  //  9  010.\\n       0,    0,  0x06,  // 10  011.\\n    18*3, 16*3,     0,  // 11  0001\\n    15*3, 17*3,     0,  // 12  0000\\n       0,    0,  0x08,  // 13  0010.\\n       0,    0,  0x0a,  // 14  0011.\\n      -1, 19*3,     0,  // 15  00000\\n       0,    0,  0x01,  // 16  00011.\\n    20*3, 21*3,     0,  // 17  00001\\n       0,    0,  0x1e,  // 18  00010.\\n       0,    0,  0x11,  // 19  000001.\\n       0,    0,  0x16,  // 20  000010.\\n       0,    0,  0x1a   // 21  000011.\\n  ]),\\n\\n  CODE_BLOCK_PATTERN = new Int16Array([\\n      2*3,   1*3,   0,  //   0\\n      3*3,   6*3,   0,  //   1  1\\n      4*3,   5*3,   0,  //   2  0\\n      8*3,  11*3,   0,  //   3  10\\n     12*3,  13*3,   0,  //   4  00\\n      9*3,   7*3,   0,  //   5  01\\n     10*3,  14*3,   0,  //   6  11\\n     20*3,  19*3,   0,  //   7  011\\n     18*3,  16*3,   0,  //   8  100\\n     23*3,  17*3,   0,  //   9  010\\n     27*3,  25*3,   0,  //  10  110\\n     21*3,  28*3,   0,  //  11  101\\n     15*3,  22*3,   0,  //  12  000\\n     24*3,  26*3,   0,  //  13  001\\n        0,     0,  60,  //  14  111.\\n     35*3,  40*3,   0,  //  15  0000\\n     44*3,  48*3,   0,  //  16  1001\\n     38*3,  36*3,   0,  //  17  0101\\n     42*3,  47*3,   0,  //  18  1000\\n     29*3,  31*3,   0,  //  19  0111\\n     39*3,  32*3,   0,  //  20  0110\\n        0,     0,  32,  //  21  1010.\\n     45*3,  46*3,   0,  //  22  0001\\n     33*3,  41*3,   0,  //  23  0100\\n     43*3,  34*3,   0,  //  24  0010\\n        0,     0,   4,  //  25  1101.\\n     30*3,  37*3,   0,  //  26  0011\\n        0,     0,   8,  //  27  1100.\\n        0,     0,  16,  //  28  1011.\\n        0,     0,  44,  //  29  0111 0.\\n     50*3,  56*3,   0,  //  30  0011 0\\n        0,     0,  28,  //  31  0111 1.\\n        0,     0,  52,  //  32  0110 1.\\n        0,     0,  62,  //  33  0100 0.\\n     61*3,  59*3,   0,  //  34  0010 1\\n     52*3,  60*3,   0,  //  35  0000 0\\n        0,     0,   1,  //  36  0101 1.\\n     55*3,  54*3,   0,  //  37  0011 1\\n        0,     0,  61,  //  38  0101 0.\\n        0,     0,  56,  //  39  0110 0.\\n     57*3,  58*3,   0,  //  40  0000 1\\n        0,     0,   2,  //  41  0100 1.\\n        0,     0,  40,  //  42  1000 0.\\n     51*3,  62*3,   0,  //  43  0010 0\\n        0,     0,  48,  //  44  1001 0.\\n     64*3,  63*3,   0,  //  45  0001 0\\n     49*3,  53*3,   0,  //  46  0001 1\\n        0,     0,  20,  //  47  1000 1.\\n        0,     0,  12,  //  48  1001 1.\\n     80*3,  83*3,   0,  //  49  0001 10\\n        0,     0,  63,  //  50  0011 00.\\n     77*3,  75*3,   0,  //  51  0010 00\\n     65*3,  73*3,   0,  //  52  0000 00\\n     84*3,  66*3,   0,  //  53  0001 11\\n        0,     0,  24,  //  54  0011 11.\\n        0,     0,  36,  //  55  0011 10.\\n        0,     0,   3,  //  56  0011 01.\\n     69*3,  87*3,   0,  //  57  0000 10\\n     81*3,  79*3,   0,  //  58  0000 11\\n     68*3,  71*3,   0,  //  59  0010 11\\n     70*3,  78*3,   0,  //  60  0000 01\\n     67*3,  76*3,   0,  //  61  0010 10\\n     72*3,  74*3,   0,  //  62  0010 01\\n     86*3,  85*3,   0,  //  63  0001 01\\n     88*3,  82*3,   0,  //  64  0001 00\\n       -1,  94*3,   0,  //  65  0000 000\\n     95*3,  97*3,   0,  //  66  0001 111\\n        0,     0,  33,  //  67  0010 100.\\n        0,     0,   9,  //  68  0010 110.\\n    106*3, 110*3,   0,  //  69  0000 100\\n    102*3, 116*3,   0,  //  70  0000 010\\n        0,     0,   5,  //  71  0010 111.\\n        0,     0,  10,  //  72  0010 010.\\n     93*3,  89*3,   0,  //  73  0000 001\\n        0,     0,   6,  //  74  0010 011.\\n        0,     0,  18,  //  75  0010 001.\\n        0,     0,  17,  //  76  0010 101.\\n        0,     0,  34,  //  77  0010 000.\\n    113*3, 119*3,   0,  //  78  0000 011\\n    103*3, 104*3,   0,  //  79  0000 111\\n     90*3,  92*3,   0,  //  80  0001 100\\n    109*3, 107*3,   0,  //  81  0000 110\\n    117*3, 118*3,   0,  //  82  0001 001\\n    101*3,  99*3,   0,  //  83  0001 101\\n     98*3,  96*3,   0,  //  84  0001 110\\n    100*3,  91*3,   0,  //  85  0001 011\\n    114*3, 115*3,   0,  //  86  0001 010\\n    105*3, 108*3,   0,  //  87  0000 101\\n    112*3, 111*3,   0,  //  88  0001 000\\n    121*3, 125*3,   0,  //  89  0000 0011\\n        0,     0,  41,  //  90  0001 1000.\\n        0,     0,  14,  //  91  0001 0111.\\n        0,     0,  21,  //  92  0001 1001.\\n    124*3, 122*3,   0,  //  93  0000 0010\\n    120*3, 123*3,   0,  //  94  0000 0001\\n        0,     0,  11,  //  95  0001 1110.\\n        0,     0,  19,  //  96  0001 1101.\\n        0,     0,   7,  //  97  0001 1111.\\n        0,     0,  35,  //  98  0001 1100.\\n        0,     0,  13,  //  99  0001 1011.\\n        0,     0,  50,  // 100  0001 0110.\\n        0,     0,  49,  // 101  0001 1010.\\n        0,     0,  58,  // 102  0000 0100.\\n        0,     0,  37,  // 103  0000 1110.\\n        0,     0,  25,  // 104  0000 1111.\\n        0,     0,  45,  // 105  0000 1010.\\n        0,     0,  57,  // 106  0000 1000.\\n        0,     0,  26,  // 107  0000 1101.\\n        0,     0,  29,  // 108  0000 1011.\\n        0,     0,  38,  // 109  0000 1100.\\n        0,     0,  53,  // 110  0000 1001.\\n        0,     0,  23,  // 111  0001 0001.\\n        0,     0,  43,  // 112  0001 0000.\\n        0,     0,  46,  // 113  0000 0110.\\n        0,     0,  42,  // 114  0001 0100.\\n        0,     0,  22,  // 115  0001 0101.\\n        0,     0,  54,  // 116  0000 0101.\\n        0,     0,  51,  // 117  0001 0010.\\n        0,     0,  15,  // 118  0001 0011.\\n        0,     0,  30,  // 119  0000 0111.\\n        0,     0,  39,  // 120  0000 0001 0.\\n        0,     0,  47,  // 121  0000 0011 0.\\n        0,     0,  55,  // 122  0000 0010 1.\\n        0,     0,  27,  // 123  0000 0001 1.\\n        0,     0,  59,  // 124  0000 0010 0.\\n        0,     0,  31   // 125  0000 0011 1.\\n  ]),\\n\\n  MOTION = new Int16Array([\\n      1*3,   2*3,   0,  //   0\\n      4*3,   3*3,   0,  //   1  0\\n        0,     0,   0,  //   2  1.\\n      6*3,   5*3,   0,  //   3  01\\n      8*3,   7*3,   0,  //   4  00\\n        0,     0,  -1,  //   5  011.\\n        0,     0,   1,  //   6  010.\\n      9*3,  10*3,   0,  //   7  001\\n     12*3,  11*3,   0,  //   8  000\\n        0,     0,   2,  //   9  0010.\\n        0,     0,  -2,  //  10  0011.\\n     14*3,  15*3,   0,  //  11  0001\\n     16*3,  13*3,   0,  //  12  0000\\n     20*3,  18*3,   0,  //  13  0000 1\\n        0,     0,   3,  //  14  0001 0.\\n        0,     0,  -3,  //  15  0001 1.\\n     17*3,  19*3,   0,  //  16  0000 0\\n       -1,  23*3,   0,  //  17  0000 00\\n     27*3,  25*3,   0,  //  18  0000 11\\n     26*3,  21*3,   0,  //  19  0000 01\\n     24*3,  22*3,   0,  //  20  0000 10\\n     32*3,  28*3,   0,  //  21  0000 011\\n     29*3,  31*3,   0,  //  22  0000 101\\n       -1,  33*3,   0,  //  23  0000 001\\n     36*3,  35*3,   0,  //  24  0000 100\\n        0,     0,  -4,  //  25  0000 111.\\n     30*3,  34*3,   0,  //  26  0000 010\\n        0,     0,   4,  //  27  0000 110.\\n        0,     0,  -7,  //  28  0000 0111.\\n        0,     0,   5,  //  29  0000 1010.\\n     37*3,  41*3,   0,  //  30  0000 0100\\n        0,     0,  -5,  //  31  0000 1011.\\n        0,     0,   7,  //  32  0000 0110.\\n     38*3,  40*3,   0,  //  33  0000 0011\\n     42*3,  39*3,   0,  //  34  0000 0101\\n        0,     0,  -6,  //  35  0000 1001.\\n        0,     0,   6,  //  36  0000 1000.\\n     51*3,  54*3,   0,  //  37  0000 0100 0\\n     50*3,  49*3,   0,  //  38  0000 0011 0\\n     45*3,  46*3,   0,  //  39  0000 0101 1\\n     52*3,  47*3,   0,  //  40  0000 0011 1\\n     43*3,  53*3,   0,  //  41  0000 0100 1\\n     44*3,  48*3,   0,  //  42  0000 0101 0\\n        0,     0,  10,  //  43  0000 0100 10.\\n        0,     0,   9,  //  44  0000 0101 00.\\n        0,     0,   8,  //  45  0000 0101 10.\\n        0,     0,  -8,  //  46  0000 0101 11.\\n     57*3,  66*3,   0,  //  47  0000 0011 11\\n        0,     0,  -9,  //  48  0000 0101 01.\\n     60*3,  64*3,   0,  //  49  0000 0011 01\\n     56*3,  61*3,   0,  //  50  0000 0011 00\\n     55*3,  62*3,   0,  //  51  0000 0100 00\\n     58*3,  63*3,   0,  //  52  0000 0011 10\\n        0,     0, -10,  //  53  0000 0100 11.\\n     59*3,  65*3,   0,  //  54  0000 0100 01\\n        0,     0,  12,  //  55  0000 0100 000.\\n        0,     0,  16,  //  56  0000 0011 000.\\n        0,     0,  13,  //  57  0000 0011 110.\\n        0,     0,  14,  //  58  0000 0011 100.\\n        0,     0,  11,  //  59  0000 0100 010.\\n        0,     0,  15,  //  60  0000 0011 010.\\n        0,     0, -16,  //  61  0000 0011 001.\\n        0,     0, -12,  //  62  0000 0100 001.\\n        0,     0, -14,  //  63  0000 0011 101.\\n        0,     0, -15,  //  64  0000 0011 011.\\n        0,     0, -11,  //  65  0000 0100 011.\\n        0,     0, -13   //  66  0000 0011 111.\\n  ]),\\n\\n  DCT_DC_SIZE_LUMINANCE = new Int8Array([\\n      2*3,   1*3, 0,  //   0\\n      6*3,   5*3, 0,  //   1  1\\n      3*3,   4*3, 0,  //   2  0\\n        0,     0, 1,  //   3  00.\\n        0,     0, 2,  //   4  01.\\n      9*3,   8*3, 0,  //   5  11\\n      7*3,  10*3, 0,  //   6  10\\n        0,     0, 0,  //   7  100.\\n     12*3,  11*3, 0,  //   8  111\\n        0,     0, 4,  //   9  110.\\n        0,     0, 3,  //  10  101.\\n     13*3,  14*3, 0,  //  11  1111\\n        0,     0, 5,  //  12  1110.\\n        0,     0, 6,  //  13  1111 0.\\n     16*3,  15*3, 0,  //  14  1111 1\\n     17*3,    -1, 0,  //  15  1111 11\\n        0,     0, 7,  //  16  1111 10.\\n        0,     0, 8   //  17  1111 110.\\n  ]),\\n\\n  DCT_DC_SIZE_CHROMINANCE = new Int8Array([\\n      2*3,   1*3, 0,  //   0\\n      4*3,   3*3, 0,  //   1  1\\n      6*3,   5*3, 0,  //   2  0\\n      8*3,   7*3, 0,  //   3  11\\n        0,     0, 2,  //   4  10.\\n        0,     0, 1,  //   5  01.\\n        0,     0, 0,  //   6  00.\\n     10*3,   9*3, 0,  //   7  111\\n        0,     0, 3,  //   8  110.\\n     12*3,  11*3, 0,  //   9  1111\\n        0,     0, 4,  //  10  1110.\\n     14*3,  13*3, 0,  //  11  1111 1\\n        0,     0, 5,  //  12  1111 0.\\n     16*3,  15*3, 0,  //  13  1111 11\\n        0,     0, 6,  //  14  1111 10.\\n     17*3,    -1, 0,  //  15  1111 111\\n        0,     0, 7,  //  16  1111 110.\\n        0,     0, 8   //  17  1111 1110.\\n  ]),\\n\\n  //  dct_coeff bitmap:\\n  //    0xff00  run\\n  //    0x00ff  level\\n\\n  //  Decoded values are unsigned. Sign bit follows in the stream.\\n\\n  //  Interpretation of the value 0x0001\\n  //    for dc_coeff_first:  run=0, level=1\\n  //    for dc_coeff_next:   If the next bit is 1: run=0, level=1\\n  //                         If the next bit is 0: end_of_block\\n\\n  //  escape decodes as 0xffff.\\n\\n  DCT_COEFF = new Int32Array([\\n      1*3,   2*3,      0,  //   0\\n      4*3,   3*3,      0,  //   1  0\\n        0,     0, 0x0001,  //   2  1.\\n      7*3,   8*3,      0,  //   3  01\\n      6*3,   5*3,      0,  //   4  00\\n     13*3,   9*3,      0,  //   5  001\\n     11*3,  10*3,      0,  //   6  000\\n     14*3,  12*3,      0,  //   7  010\\n        0,     0, 0x0101,  //   8  011.\\n     20*3,  22*3,      0,  //   9  0011\\n     18*3,  21*3,      0,  //  10  0001\\n     16*3,  19*3,      0,  //  11  0000\\n        0,     0, 0x0201,  //  12  0101.\\n     17*3,  15*3,      0,  //  13  0010\\n        0,     0, 0x0002,  //  14  0100.\\n        0,     0, 0x0003,  //  15  0010 1.\\n     27*3,  25*3,      0,  //  16  0000 0\\n     29*3,  31*3,      0,  //  17  0010 0\\n     24*3,  26*3,      0,  //  18  0001 0\\n     32*3,  30*3,      0,  //  19  0000 1\\n        0,     0, 0x0401,  //  20  0011 0.\\n     23*3,  28*3,      0,  //  21  0001 1\\n        0,     0, 0x0301,  //  22  0011 1.\\n        0,     0, 0x0102,  //  23  0001 10.\\n        0,     0, 0x0701,  //  24  0001 00.\\n        0,     0, 0xffff,  //  25  0000 01. -- escape\\n        0,     0, 0x0601,  //  26  0001 01.\\n     37*3,  36*3,      0,  //  27  0000 00\\n        0,     0, 0x0501,  //  28  0001 11.\\n     35*3,  34*3,      0,  //  29  0010 00\\n     39*3,  38*3,      0,  //  30  0000 11\\n     33*3,  42*3,      0,  //  31  0010 01\\n     40*3,  41*3,      0,  //  32  0000 10\\n     52*3,  50*3,      0,  //  33  0010 010\\n     54*3,  53*3,      0,  //  34  0010 001\\n     48*3,  49*3,      0,  //  35  0010 000\\n     43*3,  45*3,      0,  //  36  0000 001\\n     46*3,  44*3,      0,  //  37  0000 000\\n        0,     0, 0x0801,  //  38  0000 111.\\n        0,     0, 0x0004,  //  39  0000 110.\\n        0,     0, 0x0202,  //  40  0000 100.\\n        0,     0, 0x0901,  //  41  0000 101.\\n     51*3,  47*3,      0,  //  42  0010 011\\n     55*3,  57*3,      0,  //  43  0000 0010\\n     60*3,  56*3,      0,  //  44  0000 0001\\n     59*3,  58*3,      0,  //  45  0000 0011\\n     61*3,  62*3,      0,  //  46  0000 0000\\n        0,     0, 0x0a01,  //  47  0010 0111.\\n        0,     0, 0x0d01,  //  48  0010 0000.\\n        0,     0, 0x0006,  //  49  0010 0001.\\n        0,     0, 0x0103,  //  50  0010 0101.\\n        0,     0, 0x0005,  //  51  0010 0110.\\n        0,     0, 0x0302,  //  52  0010 0100.\\n        0,     0, 0x0b01,  //  53  0010 0011.\\n        0,     0, 0x0c01,  //  54  0010 0010.\\n     76*3,  75*3,      0,  //  55  0000 0010 0\\n     67*3,  70*3,      0,  //  56  0000 0001 1\\n     73*3,  71*3,      0,  //  57  0000 0010 1\\n     78*3,  74*3,      0,  //  58  0000 0011 1\\n     72*3,  77*3,      0,  //  59  0000 0011 0\\n     69*3,  64*3,      0,  //  60  0000 0001 0\\n     68*3,  63*3,      0,  //  61  0000 0000 0\\n     66*3,  65*3,      0,  //  62  0000 0000 1\\n     81*3,  87*3,      0,  //  63  0000 0000 01\\n     91*3,  80*3,      0,  //  64  0000 0001 01\\n     82*3,  79*3,      0,  //  65  0000 0000 11\\n     83*3,  86*3,      0,  //  66  0000 0000 10\\n     93*3,  92*3,      0,  //  67  0000 0001 10\\n     84*3,  85*3,      0,  //  68  0000 0000 00\\n     90*3,  94*3,      0,  //  69  0000 0001 00\\n     88*3,  89*3,      0,  //  70  0000 0001 11\\n        0,     0, 0x0203,  //  71  0000 0010 11.\\n        0,     0, 0x0104,  //  72  0000 0011 00.\\n        0,     0, 0x0007,  //  73  0000 0010 10.\\n        0,     0, 0x0402,  //  74  0000 0011 11.\\n        0,     0, 0x0502,  //  75  0000 0010 01.\\n        0,     0, 0x1001,  //  76  0000 0010 00.\\n        0,     0, 0x0f01,  //  77  0000 0011 01.\\n        0,     0, 0x0e01,  //  78  0000 0011 10.\\n    105*3, 107*3,      0,  //  79  0000 0000 111\\n    111*3, 114*3,      0,  //  80  0000 0001 011\\n    104*3,  97*3,      0,  //  81  0000 0000 010\\n    125*3, 119*3,      0,  //  82  0000 0000 110\\n     96*3,  98*3,      0,  //  83  0000 0000 100\\n       -1, 123*3,      0,  //  84  0000 0000 000\\n     95*3, 101*3,      0,  //  85  0000 0000 001\\n    106*3, 121*3,      0,  //  86  0000 0000 101\\n     99*3, 102*3,      0,  //  87  0000 0000 011\\n    113*3, 103*3,      0,  //  88  0000 0001 110\\n    112*3, 116*3,      0,  //  89  0000 0001 111\\n    110*3, 100*3,      0,  //  90  0000 0001 000\\n    124*3, 115*3,      0,  //  91  0000 0001 010\\n    117*3, 122*3,      0,  //  92  0000 0001 101\\n    109*3, 118*3,      0,  //  93  0000 0001 100\\n    120*3, 108*3,      0,  //  94  0000 0001 001\\n    127*3, 136*3,      0,  //  95  0000 0000 0010\\n    139*3, 140*3,      0,  //  96  0000 0000 1000\\n    130*3, 126*3,      0,  //  97  0000 0000 0101\\n    145*3, 146*3,      0,  //  98  0000 0000 1001\\n    128*3, 129*3,      0,  //  99  0000 0000 0110\\n        0,     0, 0x0802,  // 100  0000 0001 0001.\\n    132*3, 134*3,      0,  // 101  0000 0000 0011\\n    155*3, 154*3,      0,  // 102  0000 0000 0111\\n        0,     0, 0x0008,  // 103  0000 0001 1101.\\n    137*3, 133*3,      0,  // 104  0000 0000 0100\\n    143*3, 144*3,      0,  // 105  0000 0000 1110\\n    151*3, 138*3,      0,  // 106  0000 0000 1010\\n    142*3, 141*3,      0,  // 107  0000 0000 1111\\n        0,     0, 0x000a,  // 108  0000 0001 0011.\\n        0,     0, 0x0009,  // 109  0000 0001 1000.\\n        0,     0, 0x000b,  // 110  0000 0001 0000.\\n        0,     0, 0x1501,  // 111  0000 0001 0110.\\n        0,     0, 0x0602,  // 112  0000 0001 1110.\\n        0,     0, 0x0303,  // 113  0000 0001 1100.\\n        0,     0, 0x1401,  // 114  0000 0001 0111.\\n        0,     0, 0x0702,  // 115  0000 0001 0101.\\n        0,     0, 0x1101,  // 116  0000 0001 1111.\\n        0,     0, 0x1201,  // 117  0000 0001 1010.\\n        0,     0, 0x1301,  // 118  0000 0001 1001.\\n    148*3, 152*3,      0,  // 119  0000 0000 1101\\n        0,     0, 0x0403,  // 120  0000 0001 0010.\\n    153*3, 150*3,      0,  // 121  0000 0000 1011\\n        0,     0, 0x0105,  // 122  0000 0001 1011.\\n    131*3, 135*3,      0,  // 123  0000 0000 0001\\n        0,     0, 0x0204,  // 124  0000 0001 0100.\\n    149*3, 147*3,      0,  // 125  0000 0000 1100\\n    172*3, 173*3,      0,  // 126  0000 0000 0101 1\\n    162*3, 158*3,      0,  // 127  0000 0000 0010 0\\n    170*3, 161*3,      0,  // 128  0000 0000 0110 0\\n    168*3, 166*3,      0,  // 129  0000 0000 0110 1\\n    157*3, 179*3,      0,  // 130  0000 0000 0101 0\\n    169*3, 167*3,      0,  // 131  0000 0000 0001 0\\n    174*3, 171*3,      0,  // 132  0000 0000 0011 0\\n    178*3, 177*3,      0,  // 133  0000 0000 0100 1\\n    156*3, 159*3,      0,  // 134  0000 0000 0011 1\\n    164*3, 165*3,      0,  // 135  0000 0000 0001 1\\n    183*3, 182*3,      0,  // 136  0000 0000 0010 1\\n    175*3, 176*3,      0,  // 137  0000 0000 0100 0\\n        0,     0, 0x0107,  // 138  0000 0000 1010 1.\\n        0,     0, 0x0a02,  // 139  0000 0000 1000 0.\\n        0,     0, 0x0902,  // 140  0000 0000 1000 1.\\n        0,     0, 0x1601,  // 141  0000 0000 1111 1.\\n        0,     0, 0x1701,  // 142  0000 0000 1111 0.\\n        0,     0, 0x1901,  // 143  0000 0000 1110 0.\\n        0,     0, 0x1801,  // 144  0000 0000 1110 1.\\n        0,     0, 0x0503,  // 145  0000 0000 1001 0.\\n        0,     0, 0x0304,  // 146  0000 0000 1001 1.\\n        0,     0, 0x000d,  // 147  0000 0000 1100 1.\\n        0,     0, 0x000c,  // 148  0000 0000 1101 0.\\n        0,     0, 0x000e,  // 149  0000 0000 1100 0.\\n        0,     0, 0x000f,  // 150  0000 0000 1011 1.\\n        0,     0, 0x0205,  // 151  0000 0000 1010 0.\\n        0,     0, 0x1a01,  // 152  0000 0000 1101 1.\\n        0,     0, 0x0106,  // 153  0000 0000 1011 0.\\n    180*3, 181*3,      0,  // 154  0000 0000 0111 1\\n    160*3, 163*3,      0,  // 155  0000 0000 0111 0\\n    196*3, 199*3,      0,  // 156  0000 0000 0011 10\\n        0,     0, 0x001b,  // 157  0000 0000 0101 00.\\n    203*3, 185*3,      0,  // 158  0000 0000 0010 01\\n    202*3, 201*3,      0,  // 159  0000 0000 0011 11\\n        0,     0, 0x0013,  // 160  0000 0000 0111 00.\\n        0,     0, 0x0016,  // 161  0000 0000 0110 01.\\n    197*3, 207*3,      0,  // 162  0000 0000 0010 00\\n        0,     0, 0x0012,  // 163  0000 0000 0111 01.\\n    191*3, 192*3,      0,  // 164  0000 0000 0001 10\\n    188*3, 190*3,      0,  // 165  0000 0000 0001 11\\n        0,     0, 0x0014,  // 166  0000 0000 0110 11.\\n    184*3, 194*3,      0,  // 167  0000 0000 0001 01\\n        0,     0, 0x0015,  // 168  0000 0000 0110 10.\\n    186*3, 193*3,      0,  // 169  0000 0000 0001 00\\n        0,     0, 0x0017,  // 170  0000 0000 0110 00.\\n    204*3, 198*3,      0,  // 171  0000 0000 0011 01\\n        0,     0, 0x0019,  // 172  0000 0000 0101 10.\\n        0,     0, 0x0018,  // 173  0000 0000 0101 11.\\n    200*3, 205*3,      0,  // 174  0000 0000 0011 00\\n        0,     0, 0x001f,  // 175  0000 0000 0100 00.\\n        0,     0, 0x001e,  // 176  0000 0000 0100 01.\\n        0,     0, 0x001c,  // 177  0000 0000 0100 11.\\n        0,     0, 0x001d,  // 178  0000 0000 0100 10.\\n        0,     0, 0x001a,  // 179  0000 0000 0101 01.\\n        0,     0, 0x0011,  // 180  0000 0000 0111 10.\\n        0,     0, 0x0010,  // 181  0000 0000 0111 11.\\n    189*3, 206*3,      0,  // 182  0000 0000 0010 11\\n    187*3, 195*3,      0,  // 183  0000 0000 0010 10\\n    218*3, 211*3,      0,  // 184  0000 0000 0001 010\\n        0,     0, 0x0025,  // 185  0000 0000 0010 011.\\n    215*3, 216*3,      0,  // 186  0000 0000 0001 000\\n        0,     0, 0x0024,  // 187  0000 0000 0010 100.\\n    210*3, 212*3,      0,  // 188  0000 0000 0001 110\\n        0,     0, 0x0022,  // 189  0000 0000 0010 110.\\n    213*3, 209*3,      0,  // 190  0000 0000 0001 111\\n    221*3, 222*3,      0,  // 191  0000 0000 0001 100\\n    219*3, 208*3,      0,  // 192  0000 0000 0001 101\\n    217*3, 214*3,      0,  // 193  0000 0000 0001 001\\n    223*3, 220*3,      0,  // 194  0000 0000 0001 011\\n        0,     0, 0x0023,  // 195  0000 0000 0010 101.\\n        0,     0, 0x010b,  // 196  0000 0000 0011 100.\\n        0,     0, 0x0028,  // 197  0000 0000 0010 000.\\n        0,     0, 0x010c,  // 198  0000 0000 0011 011.\\n        0,     0, 0x010a,  // 199  0000 0000 0011 101.\\n        0,     0, 0x0020,  // 200  0000 0000 0011 000.\\n        0,     0, 0x0108,  // 201  0000 0000 0011 111.\\n        0,     0, 0x0109,  // 202  0000 0000 0011 110.\\n        0,     0, 0x0026,  // 203  0000 0000 0010 010.\\n        0,     0, 0x010d,  // 204  0000 0000 0011 010.\\n        0,     0, 0x010e,  // 205  0000 0000 0011 001.\\n        0,     0, 0x0021,  // 206  0000 0000 0010 111.\\n        0,     0, 0x0027,  // 207  0000 0000 0010 001.\\n        0,     0, 0x1f01,  // 208  0000 0000 0001 1011.\\n        0,     0, 0x1b01,  // 209  0000 0000 0001 1111.\\n        0,     0, 0x1e01,  // 210  0000 0000 0001 1100.\\n        0,     0, 0x1002,  // 211  0000 0000 0001 0101.\\n        0,     0, 0x1d01,  // 212  0000 0000 0001 1101.\\n        0,     0, 0x1c01,  // 213  0000 0000 0001 1110.\\n        0,     0, 0x010f,  // 214  0000 0000 0001 0011.\\n        0,     0, 0x0112,  // 215  0000 0000 0001 0000.\\n        0,     0, 0x0111,  // 216  0000 0000 0001 0001.\\n        0,     0, 0x0110,  // 217  0000 0000 0001 0010.\\n        0,     0, 0x0603,  // 218  0000 0000 0001 0100.\\n        0,     0, 0x0b02,  // 219  0000 0000 0001 1010.\\n        0,     0, 0x0e02,  // 220  0000 0000 0001 0111.\\n        0,     0, 0x0d02,  // 221  0000 0000 0001 1000.\\n        0,     0, 0x0c02,  // 222  0000 0000 0001 1001.\\n        0,     0, 0x0f02   // 223  0000 0000 0001 0110.\\n  ]),\\n\\n  PICTURE_TYPE_I = 1,\\n  PICTURE_TYPE_P = 2,\\n  PICTURE_TYPE_B = 3,\\n  PICTURE_TYPE_D = 4,\\n\\n  START_SEQUENCE = 0xB3,\\n  START_SLICE_FIRST = 0x01,\\n  START_SLICE_LAST = 0xAF,\\n  START_PICTURE = 0x00,\\n  START_EXTENSION = 0xB5,\\n  START_USER_DATA = 0xB2,\\n\\n  // Shaders for accelerated WebGL YCbCrToRGBA conversion\\n  SHADER_FRAGMENT_YCBCRTORGBA = [\\n    'precision mediump float;',\\n    'uniform sampler2D YTexture;',\\n    'uniform sampler2D CBTexture;',\\n    'uniform sampler2D CRTexture;',\\n    'varying vec2 texCoord;',\\n\\n    'void main() {',\\n      'float y = texture2D(YTexture, texCoord).r;',\\n      'float cr = texture2D(CBTexture, texCoord).r - 0.5;',\\n      'float cb = texture2D(CRTexture, texCoord).r - 0.5;',\\n\\n      'gl_FragColor = vec4(',\\n        'y + 1.4 * cr,',\\n        'y + -0.343 * cb - 0.711 * cr,',\\n        'y + 1.765 * cb,',\\n        '1.0',\\n      ');',\\n    '}'\\n  ].join('\\\\n'),\\n\\n  SHADER_FRAGMENT_LOADING = [\\n    'precision mediump float;',\\n    'uniform float loaded;',\\n    'varying vec2 texCoord;',\\n\\n    'void main() {',\\n      'float c = ceil(loaded-(1.0-texCoord.y));',\\n      //'float c = ceil(loaded-(1.0-texCoord.y) +sin((texCoord.x+loaded)*16.0)*0.01);', // Fancy wave anim\\n      'gl_FragColor = vec4(c,c,c,1);',\\n    '}'\\n  ].join('\\\\n'),\\n\\n  SHADER_VERTEX_IDENTITY = [\\n    'attribute vec2 vertex;',\\n    'varying vec2 texCoord;',\\n\\n    'void main() {',\\n      'texCoord = vertex;',\\n      'gl_Position = vec4((vertex * 2.0 - 1.0) * vec2(1, -1), 0.0, 1.0);',\\n    '}'\\n  ].join('\\\\n');\\n\\nvar MACROBLOCK_TYPE_TABLES = [\\n  null,\\n  MACROBLOCK_TYPE_I,\\n  MACROBLOCK_TYPE_P,\\n  MACROBLOCK_TYPE_B\\n];\\n\\n\\n\\n// ----------------------------------------------------------------------------\\n// Bit Reader\\n\\nvar BitReader = function(arrayBuffer) {\\n  this.bytes = new Uint8Array(arrayBuffer);\\n  this.length = this.bytes.length;\\n  this.writePos = this.bytes.length;\\n  this.index = 0;\\n};\\n\\nBitReader.NOT_FOUND = -1;\\n\\nBitReader.prototype.findNextMPEGStartCode = function() {\\n  for( var i = (this.index+7 >> 3); i < this.writePos; i++ ) {\\n    if(\\n      this.bytes[i] == 0x00 &&\\n      this.bytes[i+1] == 0x00 &&\\n      this.bytes[i+2] == 0x01\\n    ) {\\n      this.index = (i+4) << 3;\\n      return this.bytes[i+3];\\n    }\\n  }\\n  this.index = (this.writePos << 3);\\n  return BitReader.NOT_FOUND;\\n};\\n\\nBitReader.prototype.nextBytesAreStartCode = function() {\\n  var i = (this.index+7 >> 3);\\n  return (\\n    i >= this.writePos || (\\n      this.bytes[i] == 0x00 &&\\n      this.bytes[i+1] == 0x00 &&\\n      this.bytes[i+2] == 0x01\\n    )\\n  );\\n};\\n\\nBitReader.prototype.nextBits = function(count) {\\n  var\\n    byteOffset = this.index >> 3,\\n    room = (8 - this.index % 8);\\n\\n  if( room >= count ) {\\n    return (this.bytes[byteOffset] >> (room - count)) & (0xff >> (8-count));\\n  }\\n\\n  var\\n    leftover = (this.index + count) % 8, // Leftover bits in last byte\\n    end = (this.index + count -1) >> 3,\\n    value = this.bytes[byteOffset] & (0xff >> (8-room)); // Fill out first byte\\n\\n  for( byteOffset++; byteOffset < end; byteOffset++ ) {\\n    value <<= 8; // Shift and\\n    value |= this.bytes[byteOffset]; // Put next byte\\n  }\\n\\n  if (leftover > 0) {\\n    value <<= leftover; // Make room for remaining bits\\n    value |= (this.bytes[byteOffset] >> (8 - leftover));\\n  }\\n  else {\\n    value <<= 8;\\n    value |= this.bytes[byteOffset];\\n  }\\n\\n  return value;\\n};\\n\\nBitReader.prototype.getBits = function(count) {\\n  var value = this.nextBits(count);\\n  this.index += count;\\n  return value;\\n};\\n\\nBitReader.prototype.advance = function(count) {\\n  return (this.index += count);\\n};\\n\\nBitReader.prototype.rewind = function(count) {\\n  return (this.index -= count);\\n};\\n\\nvar exports = module.exports = jsmpeg\\n\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///11\\n\")}});","extractedComments":[]}